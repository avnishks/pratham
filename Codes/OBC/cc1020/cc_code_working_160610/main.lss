
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  000013c8  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  00800144  00800144  00001540  2**0
                  ALLOC
  3 .stab         00001bf0  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc6  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00003df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000030c  00000000  00000000  00003e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000152e  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000359  00000000  00000000  00005650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001722  00000000  00000000  000059a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000070cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003e8  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a7a  00000000  00000000  00007634  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  000080ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 05 	call	0xb82	; 0xb82 <main>
      8a:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteToCC1020Register>:
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
      92:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
      94:	9f b1       	in	r25, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
      96:	88 0f       	add	r24, r24
      98:	81 60       	ori	r24, 0x01	; 1
      9a:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
      9c:	77 9b       	sbis	0x0e, 7	; 14
      9e:	fe cf       	rjmp	.-4      	; 0x9c <WriteToCC1020Register+0xa>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
      a0:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
      a2:	6f b9       	out	0x0f, r22	; 15

	while (! (SPSR & (1<<SPIF)));
      a4:	77 9b       	sbis	0x0e, 7	; 14
      a6:	fe cf       	rjmp	.-4      	; 0xa4 <WriteToCC1020Register+0x12>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
      a8:	c4 9a       	sbi	0x18, 4	; 24
}
      aa:	08 95       	ret

000000ac <ReadFromCC1020Register>:
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
      ac:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
      ae:	9f b1       	in	r25, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	88 0f       	add	r24, r24
      b4:	99 1f       	adc	r25, r25
      b6:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
      b8:	77 9b       	sbis	0x0e, 7	; 14
      ba:	fe cf       	rjmp	.-4      	; 0xb8 <ReadFromCC1020Register+0xc>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
      c0:	77 9b       	sbis	0x0e, 7	; 14
      c2:	fe cf       	rjmp	.-4      	; 0xc0 <ReadFromCC1020Register+0x14>
	Value=SPDR;
      c4:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
      c6:	c4 9a       	sbi	0x18, 4	; 24
	return Value;
}
      c8:	08 95       	ret

000000ca <ResetCC1020>:
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
      ca:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
      cc:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
      d2:	77 9b       	sbis	0x0e, 7	; 14
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <ResetCC1020+0x8>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
      d6:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
      d8:	8e e0       	ldi	r24, 0x0E	; 14
      da:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
      dc:	77 9b       	sbis	0x0e, 7	; 14
      de:	fe cf       	rjmp	.-4      	; 0xdc <ResetCC1020+0x12>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
      e0:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
      e2:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
      e4:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
      ea:	77 9b       	sbis	0x0e, 7	; 14
      ec:	fe cf       	rjmp	.-4      	; 0xea <ResetCC1020+0x20>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
      ee:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
      f0:	8f e1       	ldi	r24, 0x1F	; 31
      f2:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
      f4:	77 9b       	sbis	0x0e, 7	; 14
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <ResetCC1020+0x2a>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
      f8:	c4 9a       	sbi	0x18, 4	; 24
  // Reset CC1020
  WriteToCC1020Register(CC1020_MAIN, 0x0E);

  // Bring CC1020 out of reset
  WriteToCC1020Register(CC1020_MAIN, 0x1F);
}
      fa:	08 95       	ret

000000fc <SetupCC1020Allregisters>:
/****************************************************************************/
/*  This routine configures all CC1020 registers as per values stored in DefaultConfig433[] */
/****************************************************************************/

void SetupCC1020Allregisters(void)
{
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	30 e0       	ldi	r19, 0x00	; 0
  char counter, value;
  
  for(counter=0x01; counter<=0x20; counter++)
  {
	value=DefaultConfig433[counter-1];				// For Transmitter as well as Receiver
     100:	f9 01       	movw	r30, r18
     102:	e9 5e       	subi	r30, 0xE9	; 233
     104:	fe 4f       	sbci	r31, 0xFE	; 254
     106:	e0 81       	ld	r30, Z
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     108:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     10a:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     10c:	c9 01       	movw	r24, r18
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	81 60       	ori	r24, 0x01	; 1
     114:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     116:	77 9b       	sbis	0x0e, 7	; 14
     118:	fe cf       	rjmp	.-4      	; 0x116 <SetupCC1020Allregisters+0x1a>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     11a:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     11c:	ef b9       	out	0x0f, r30	; 15

	while (! (SPSR & (1<<SPIF)));
     11e:	77 9b       	sbis	0x0e, 7	; 14
     120:	fe cf       	rjmp	.-4      	; 0x11e <SetupCC1020Allregisters+0x22>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     122:	c4 9a       	sbi	0x18, 4	; 24
     124:	2f 5f       	subi	r18, 0xFF	; 255
     126:	3f 4f       	sbci	r19, 0xFF	; 255

void SetupCC1020Allregisters(void)
{
  char counter, value;
  
  for(counter=0x01; counter<=0x20; counter++)
     128:	21 32       	cpi	r18, 0x21	; 33
     12a:	31 05       	cpc	r19, r1
     12c:	49 f7       	brne	.-46     	; 0x100 <SetupCC1020Allregisters+0x4>
	value=DefaultConfig433[counter-1];				// For Transmitter as well as Receiver
    WriteToCC1020Register(counter,value);
  }


}
     12e:	08 95       	ret

00000130 <WakeUpCC1020ToTX>:
/*  This routine wakes the CC1020 up from PD mode to TX mode. CC is still in 
	power down mode 		*/
/****************************************************************************/

void WakeUpCC1020ToTX(char TXANALOG1)
{
     130:	98 2f       	mov	r25, r24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     132:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     134:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     13a:	77 9b       	sbis	0x0e, 7	; 14
     13c:	fe cf       	rjmp	.-4      	; 0x13a <WakeUpCC1020ToTX+0xa>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     13e:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     140:	8b ed       	ldi	r24, 0xDB	; 219
     142:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     144:	77 9b       	sbis	0x0e, 7	; 14
     146:	fe cf       	rjmp	.-4      	; 0x144 <WakeUpCC1020ToTX+0x14>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     148:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     14a:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     14c:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     14e:	8f e2       	ldi	r24, 0x2F	; 47
     150:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     152:	77 9b       	sbis	0x0e, 7	; 14
     154:	fe cf       	rjmp	.-4      	; 0x152 <WakeUpCC1020ToTX+0x22>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     156:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     158:	9f b9       	out	0x0f, r25	; 15

	while (! (SPSR & (1<<SPIF)));
     15a:	77 9b       	sbis	0x0e, 7	; 14
     15c:	fe cf       	rjmp	.-4      	; 0x15a <WakeUpCC1020ToTX+0x2a>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     15e:	c4 9a       	sbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     160:	80 e7       	ldi	r24, 0x70	; 112
     162:	97 e1       	ldi	r25, 0x17	; 23
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <WakeUpCC1020ToTX+0x34>
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     168:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     16a:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     170:	77 9b       	sbis	0x0e, 7	; 14
     172:	fe cf       	rjmp	.-4      	; 0x170 <WakeUpCC1020ToTX+0x40>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     174:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     176:	89 ed       	ldi	r24, 0xD9	; 217
     178:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     17a:	77 9b       	sbis	0x0e, 7	; 14
     17c:	fe cf       	rjmp	.-4      	; 0x17a <WakeUpCC1020ToTX+0x4a>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     17e:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     180:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     182:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     188:	77 9b       	sbis	0x0e, 7	; 14
     18a:	fe cf       	rjmp	.-4      	; 0x188 <WakeUpCC1020ToTX+0x58>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     18c:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     18e:	81 ed       	ldi	r24, 0xD1	; 209
     190:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     192:	77 9b       	sbis	0x0e, 7	; 14
     194:	fe cf       	rjmp	.-4      	; 0x192 <WakeUpCC1020ToTX+0x62>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     196:	c4 9a       	sbi	0x18, 4	; 24
  WriteToCC1020Register(CC1020_MAIN,0xD1);
  
  
  
  
}
     198:	08 95       	ret

0000019a <WakeUpCC1020ToRX>:
/****************************************************************************/
/*  This routine wakes the CC1020 up from PD mode to RX mode                */
/****************************************************************************/

void WakeUpCC1020ToRX(char RXANALOG1)
{
     19a:	98 2f       	mov	r25, r24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     19c:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     19e:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     1a4:	77 9b       	sbis	0x0e, 7	; 14
     1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <WakeUpCC1020ToRX+0xa>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     1a8:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     1aa:	8b e1       	ldi	r24, 0x1B	; 27
     1ac:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     1ae:	77 9b       	sbis	0x0e, 7	; 14
     1b0:	fe cf       	rjmp	.-4      	; 0x1ae <WakeUpCC1020ToRX+0x14>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     1b2:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     1b4:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     1b6:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     1b8:	8f e2       	ldi	r24, 0x2F	; 47
     1ba:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     1bc:	77 9b       	sbis	0x0e, 7	; 14
     1be:	fe cf       	rjmp	.-4      	; 0x1bc <WakeUpCC1020ToRX+0x22>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     1c0:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     1c2:	9f b9       	out	0x0f, r25	; 15

	while (! (SPSR & (1<<SPIF)));
     1c4:	77 9b       	sbis	0x0e, 7	; 14
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <WakeUpCC1020ToRX+0x2a>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     1c8:	c4 9a       	sbi	0x18, 4	; 24
     1ca:	80 e7       	ldi	r24, 0x70	; 112
     1cc:	97 e1       	ldi	r25, 0x17	; 23
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <WakeUpCC1020ToRX+0x34>
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     1d2:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     1d4:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     1da:	77 9b       	sbis	0x0e, 7	; 14
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <WakeUpCC1020ToRX+0x40>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     1de:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     1e0:	89 e1       	ldi	r24, 0x19	; 25
     1e2:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     1e4:	77 9b       	sbis	0x0e, 7	; 14
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <WakeUpCC1020ToRX+0x4a>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     1e8:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     1ea:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     1ec:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     1f2:	77 9b       	sbis	0x0e, 7	; 14
     1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <WakeUpCC1020ToRX+0x58>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     1f6:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     1f8:	81 e1       	ldi	r24, 0x11	; 17
     1fa:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     1fc:	77 9b       	sbis	0x0e, 7	; 14
     1fe:	fe cf       	rjmp	.-4      	; 0x1fc <WakeUpCC1020ToRX+0x62>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     200:	c4 9a       	sbi	0x18, 4	; 24
	//_delay_us(150);


  // Turn on frequency synthesiser
  WriteToCC1020Register(CC1020_MAIN,0x11);
}
     202:	08 95       	ret

00000204 <CalibrateCC1020>:
/*  Returns 0 if calibration fails, non-zero otherwise. Checks the LOCK     */
/*  to check for success.                                                   */
/****************************************************************************/

int CalibrateCC1020(char PA_POWER1)
{
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	00 d0       	rcall	.+0      	; 0x20a <CalibrateCC1020+0x6>
     20a:	00 d0       	rcall	.+0      	; 0x20c <CalibrateCC1020+0x8>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	e8 2f       	mov	r30, r24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     212:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     214:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     216:	89 e3       	ldi	r24, 0x39	; 57
     218:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     21a:	77 9b       	sbis	0x0e, 7	; 14
     21c:	fe cf       	rjmp	.-4      	; 0x21a <CalibrateCC1020+0x16>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     21e:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     220:	1f b8       	out	0x0f, r1	; 15

	while (! (SPSR & (1<<SPIF)));
     222:	77 9b       	sbis	0x0e, 7	; 14
     224:	fe cf       	rjmp	.-4      	; 0x222 <CalibrateCC1020+0x1e>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     226:	c4 9a       	sbi	0x18, 4	; 24

  // Turn off PA to avoid spurs during calibration in TX mode
  WriteToCC1020Register(CC1020_PA_POWER,0x00);

  // Calibrate, and re-calibrate if necessary:
  for (nCalAttempt = CAL_ATTEMPT_MAX; (nCalAttempt>0); nCalAttempt--) 
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9c 83       	std	Y+4, r25	; 0x04
     22e:	8b 83       	std	Y+3, r24	; 0x03
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     230:	a7 e3       	ldi	r26, 0x37	; 55
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
	SPDR=data;
     232:	f4 eb       	ldi	r31, 0xB4	; 180

    // Monitor calibration complete bit in STATUS register
	// CAL_COMPLETE bit set to 1 when calibration is complete
	// Waiting time according to register settings is approx 27ms. Ref_freq=fosc/2 and CAL_WAIT = 11
	// We are waiting for 30ms
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x80)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     234:	6e e1       	ldi	r22, 0x1E	; 30
     236:	70 e0       	ldi	r23, 0x00	; 0
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
	Value=SPDR;
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     238:	30 e8       	ldi	r19, 0x80	; 128

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     23a:	2f ef       	ldi	r18, 0xFF	; 255
     23c:	40 ed       	ldi	r20, 0xD0	; 208
     23e:	57 e0       	ldi	r21, 0x07	; 7
     240:	53 c0       	rjmp	.+166    	; 0x2e8 <CalibrateCC1020+0xe4>
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     242:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     244:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     246:	af b9       	out	0x0f, r26	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     248:	77 9b       	sbis	0x0e, 7	; 14
     24a:	fe cf       	rjmp	.-4      	; 0x248 <CalibrateCC1020+0x44>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     24c:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     24e:	ff b9       	out	0x0f, r31	; 15

	while (! (SPSR & (1<<SPIF)));
     250:	77 9b       	sbis	0x0e, 7	; 14
     252:	fe cf       	rjmp	.-4      	; 0x250 <CalibrateCC1020+0x4c>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     254:	c4 9a       	sbi	0x18, 4	; 24

    // Monitor calibration complete bit in STATUS register
	// CAL_COMPLETE bit set to 1 when calibration is complete
	// Waiting time according to register settings is approx 27ms. Ref_freq=fosc/2 and CAL_WAIT = 11
	// We are waiting for 30ms
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x80)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     256:	7a 83       	std	Y+2, r23	; 0x02
     258:	69 83       	std	Y+1, r22	; 0x01
     25a:	08 c0       	rjmp	.+16     	; 0x26c <CalibrateCC1020+0x68>
     25c:	ca 01       	movw	r24, r20
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <CalibrateCC1020+0x5a>
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     26c:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     26e:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     270:	3f b9       	out	0x0f, r19	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     272:	77 9b       	sbis	0x0e, 7	; 14
     274:	fe cf       	rjmp	.-4      	; 0x272 <CalibrateCC1020+0x6e>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     276:	2f b9       	out	0x0f, r18	; 15
	while (! (SPSR & (1<<SPIF)));
     278:	77 9b       	sbis	0x0e, 7	; 14
     27a:	fe cf       	rjmp	.-4      	; 0x278 <CalibrateCC1020+0x74>
	Value=SPDR;
     27c:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     27e:	c4 9a       	sbi	0x18, 4	; 24

    // Monitor calibration complete bit in STATUS register
	// CAL_COMPLETE bit set to 1 when calibration is complete
	// Waiting time according to register settings is approx 27ms. Ref_freq=fosc/2 and CAL_WAIT = 11
	// We are waiting for 30ms
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x80)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     280:	87 fd       	sbrc	r24, 7
     282:	05 c0       	rjmp	.+10     	; 0x28e <CalibrateCC1020+0x8a>
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	18 16       	cp	r1, r24
     28a:	19 06       	cpc	r1, r25
     28c:	3c f3       	brlt	.-50     	; 0x25c <CalibrateCC1020+0x58>
	{_delay_ms(1);}		
	
    // Monitor lock
	// LOCK_CONTINUOUS bit in STATUS register is set to 1 when PLL is in LOCK
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     28e:	7a 83       	std	Y+2, r23	; 0x02
     290:	69 83       	std	Y+1, r22	; 0x01
     292:	08 c0       	rjmp	.+16     	; 0x2a4 <CalibrateCC1020+0xa0>
     294:	ca 01       	movw	r24, r20
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <CalibrateCC1020+0x92>
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	9a 81       	ldd	r25, Y+2	; 0x02
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     2a4:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     2a6:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     2a8:	3f b9       	out	0x0f, r19	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     2aa:	77 9b       	sbis	0x0e, 7	; 14
     2ac:	fe cf       	rjmp	.-4      	; 0x2aa <CalibrateCC1020+0xa6>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     2ae:	2f b9       	out	0x0f, r18	; 15
	while (! (SPSR & (1<<SPIF)));
     2b0:	77 9b       	sbis	0x0e, 7	; 14
     2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <CalibrateCC1020+0xac>
	Value=SPDR;
     2b4:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     2b6:	c4 9a       	sbi	0x18, 4	; 24
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x80)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
	{_delay_ms(1);}		
	
    // Monitor lock
	// LOCK_CONTINUOUS bit in STATUS register is set to 1 when PLL is in LOCK
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     2b8:	84 fd       	sbrc	r24, 4
     2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <CalibrateCC1020+0xc2>
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	18 16       	cp	r1, r24
     2c2:	19 06       	cpc	r1, r25
     2c4:	3c f3       	brlt	.-50     	; 0x294 <CalibrateCC1020+0x90>
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     2c6:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     2c8:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     2ca:	3f b9       	out	0x0f, r19	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     2cc:	77 9b       	sbis	0x0e, 7	; 14
     2ce:	fe cf       	rjmp	.-4      	; 0x2cc <CalibrateCC1020+0xc8>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     2d0:	2f b9       	out	0x0f, r18	; 15
	while (! (SPSR & (1<<SPIF)));
     2d2:	77 9b       	sbis	0x0e, 7	; 14
     2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <CalibrateCC1020+0xce>
	Value=SPDR;
     2d6:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     2d8:	c4 9a       	sbi	0x18, 4	; 24
	// LOCK_CONTINUOUS bit in STATUS register is set to 1 when PLL is in LOCK
    for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
	{_delay_ms(1);}		

    // Abort further recalibration attempts if successful LOCK
    if((ReadFromCC1020Register(CC1020_STATUS)&0x10) == 0x10) 
     2da:	84 fd       	sbrc	r24, 4
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <CalibrateCC1020+0xf0>

  // Turn off PA to avoid spurs during calibration in TX mode
  WriteToCC1020Register(CC1020_PA_POWER,0x00);

  // Calibrate, and re-calibrate if necessary:
  for (nCalAttempt = CAL_ATTEMPT_MAX; (nCalAttempt>0); nCalAttempt--) 
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	9c 83       	std	Y+4, r25	; 0x04
     2e6:	8b 83       	std	Y+3, r24	; 0x03
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	18 16       	cp	r1, r24
     2ee:	19 06       	cpc	r1, r25
     2f0:	0c f4       	brge	.+2      	; 0x2f4 <CalibrateCC1020+0xf0>
     2f2:	a7 cf       	rjmp	.-178    	; 0x242 <CalibrateCC1020+0x3e>
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     2f4:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     2f6:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     2f8:	89 e3       	ldi	r24, 0x39	; 57
     2fa:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <CalibrateCC1020+0xf8>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     300:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     302:	ef b9       	out	0x0f, r30	; 15

	while (! (SPSR & (1<<SPIF)));
     304:	77 9b       	sbis	0x0e, 7	; 14
     306:	fe cf       	rjmp	.-4      	; 0x304 <CalibrateCC1020+0x100>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     308:	c4 9a       	sbi	0x18, 4	; 24
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     30a:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     30c:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     30e:	80 e8       	ldi	r24, 0x80	; 128
     310:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     312:	77 9b       	sbis	0x0e, 7	; 14
     314:	fe cf       	rjmp	.-4      	; 0x312 <CalibrateCC1020+0x10e>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     31a:	77 9b       	sbis	0x0e, 7	; 14
     31c:	fe cf       	rjmp	.-4      	; 0x31a <CalibrateCC1020+0x116>
	Value=SPDR;
     31e:	2f b1       	in	r18, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     320:	c4 9a       	sbi	0x18, 4	; 24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	54 e0       	ldi	r21, 0x04	; 4
     326:	36 95       	lsr	r19
     328:	27 95       	ror	r18
     32a:	5a 95       	dec	r21
     32c:	e1 f7       	brne	.-8      	; 0x326 <CalibrateCC1020+0x122>
     32e:	21 70       	andi	r18, 0x01	; 1
     330:	30 70       	andi	r19, 0x00	; 0
  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER, PA_POWER1);

  // Return state of LOCK_CONTINUOUS bit
  return ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10);
}
     332:	c9 01       	movw	r24, r18
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	cf 91       	pop	r28
     33e:	df 91       	pop	r29
     340:	08 95       	ret

00000342 <SetupCC1020TX>:
/*  This routine puts the CC1020 into TX mode (from RX). When switching to  */
/*  TX from PD, use WakeupCC1020ToTX first                                  */
/****************************************************************************/

char SetupCC1020TX(char TXANALOG1, char PA_POWER1)
{
     342:	1f 93       	push	r17
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	00 d0       	rcall	.+0      	; 0x34a <SetupCC1020TX+0x8>
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	98 2f       	mov	r25, r24
     350:	16 2f       	mov	r17, r22
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     352:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     354:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     356:	89 e3       	ldi	r24, 0x39	; 57
     358:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     35a:	77 9b       	sbis	0x0e, 7	; 14
     35c:	fe cf       	rjmp	.-4      	; 0x35a <SetupCC1020TX+0x18>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     35e:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     360:	1f b8       	out	0x0f, r1	; 15

	while (! (SPSR & (1<<SPIF)));
     362:	77 9b       	sbis	0x0e, 7	; 14
     364:	fe cf       	rjmp	.-4      	; 0x362 <SetupCC1020TX+0x20>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     366:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     368:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     36a:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     36c:	8f e2       	ldi	r24, 0x2F	; 47
     36e:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     370:	77 9b       	sbis	0x0e, 7	; 14
     372:	fe cf       	rjmp	.-4      	; 0x370 <SetupCC1020TX+0x2e>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     374:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     376:	9f b9       	out	0x0f, r25	; 15

	while (! (SPSR & (1<<SPIF)));
     378:	77 9b       	sbis	0x0e, 7	; 14
     37a:	fe cf       	rjmp	.-4      	; 0x378 <SetupCC1020TX+0x36>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     37c:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     37e:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     380:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     386:	77 9b       	sbis	0x0e, 7	; 14
     388:	fe cf       	rjmp	.-4      	; 0x386 <SetupCC1020TX+0x44>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     38a:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     38c:	81 ec       	ldi	r24, 0xC1	; 193
     38e:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     390:	77 9b       	sbis	0x0e, 7	; 14
     392:	fe cf       	rjmp	.-4      	; 0x390 <SetupCC1020TX+0x4e>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     394:	c4 9a       	sbi	0x18, 4	; 24
  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     396:	8e e1       	ldi	r24, 0x1E	; 30
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
	Value=SPDR;
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     39e:	50 e8       	ldi	r21, 0x80	; 128

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     3a0:	4f ef       	ldi	r20, 0xFF	; 255
     3a2:	20 ed       	ldi	r18, 0xD0	; 208
     3a4:	37 e0       	ldi	r19, 0x07	; 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <SetupCC1020TX+0x76>
     3a8:	c9 01       	movw	r24, r18
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <SetupCC1020TX+0x68>
  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     3b8:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     3ba:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     3bc:	5f b9       	out	0x0f, r21	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     3be:	77 9b       	sbis	0x0e, 7	; 14
     3c0:	fe cf       	rjmp	.-4      	; 0x3be <SetupCC1020TX+0x7c>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     3c2:	4f b9       	out	0x0f, r20	; 15
	while (! (SPSR & (1<<SPIF)));
     3c4:	77 9b       	sbis	0x0e, 7	; 14
     3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <SetupCC1020TX+0x82>
	Value=SPDR;
     3c8:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     3ca:	c4 9a       	sbi	0x18, 4	; 24
  // Switch into TX, switch to freq. reg B
  WriteToCC1020Register(CC1020_MAIN,0xC1);     // TX Coming out of Power down at this stage

  // Monitor lock
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
     3cc:	84 fd       	sbrc	r24, 4
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <SetupCC1020TX+0x98>
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	18 16       	cp	r1, r24
     3d6:	19 06       	cpc	r1, r25
     3d8:	3c f3       	brlt	.-50     	; 0x3a8 <SetupCC1020TX+0x66>
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     3da:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     3dc:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     3e2:	77 9b       	sbis	0x0e, 7	; 14
     3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <SetupCC1020TX+0xa0>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     3ea:	77 9b       	sbis	0x0e, 7	; 14
     3ec:	fe cf       	rjmp	.-4      	; 0x3ea <SetupCC1020TX+0xa8>
	Value=SPDR;
     3ee:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     3f0:	c4 9a       	sbi	0x18, 4	; 24
  // LOCK_CONTINUOUS bit set to 1 when PLL is in LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x00)&&(TimeOutCounter>0); TimeOutCounter--)
  {_delay_ms(1);}
	
  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
     3f2:	84 fd       	sbrc	r24, 4
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <SetupCC1020TX+0xbe>
	sbi(PORTA,LED_PLL);
  }
  else	// if PLL is not locked then Recalibrate
  {
    // If recalibration ok
		if(CalibrateCC1020(PA_POWER1))
     3f6:	81 2f       	mov	r24, r17
     3f8:	0e 94 02 01 	call	0x204	; 0x204 <CalibrateCC1020>
     3fc:	89 2b       	or	r24, r25
     3fe:	21 f0       	breq	.+8      	; 0x408 <SetupCC1020TX+0xc6>
		{
		lock_status = TRUE;
		sbi(PORTA,LED_PLL);
     400:	d9 9a       	sbi	0x1b, 1	; 27
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	03 c0       	rjmp	.+6      	; 0x40e <SetupCC1020TX+0xcc>
	// Else (recalibration failed)
		}
	   else
	   {
		lock_status = FALSE;
		cbi(PORTA,LED_PLL);
     408:	d9 98       	cbi	0x1b, 1	; 27
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     40e:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     410:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     412:	89 e3       	ldi	r24, 0x39	; 57
     414:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     416:	77 9b       	sbis	0x0e, 7	; 14
     418:	fe cf       	rjmp	.-4      	; 0x416 <SetupCC1020TX+0xd4>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     41a:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     41c:	1f b9       	out	0x0f, r17	; 15

	while (! (SPSR & (1<<SPIF)));
     41e:	77 9b       	sbis	0x0e, 7	; 14
     420:	fe cf       	rjmp	.-4      	; 0x41e <SetupCC1020TX+0xdc>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     422:	c4 9a       	sbi	0x18, 4	; 24
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     424:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     426:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     42c:	77 9b       	sbis	0x0e, 7	; 14
     42e:	fe cf       	rjmp	.-4      	; 0x42c <SetupCC1020TX+0xea>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     434:	77 9b       	sbis	0x0e, 7	; 14
     436:	fe cf       	rjmp	.-4      	; 0x434 <SetupCC1020TX+0xf2>
	Value=SPDR;
     438:	9f b1       	in	r25, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     43a:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     43c:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     43e:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     444:	77 9b       	sbis	0x0e, 7	; 14
     446:	fe cf       	rjmp	.-4      	; 0x444 <SetupCC1020TX+0x102>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     448:	8f b1       	in	r24, 0x0f	; 15

  // Restore PA setting
  WriteToCC1020Register(CC1020_PA_POWER,PA_POWER1);

  // Turn OFF DCLK_CS (Carrier Sense Squelch) in TX
  WriteToCC1020Register(CC1020_INTERFACE,ReadFromCC1020Register(CC1020_INTERFACE)&~0x10);
     44a:	9f 7e       	andi	r25, 0xEF	; 239
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
	SPDR=data;
     44c:	9f b9       	out	0x0f, r25	; 15

	while (! (SPSR & (1<<SPIF)));
     44e:	77 9b       	sbis	0x0e, 7	; 14
     450:	fe cf       	rjmp	.-4      	; 0x44e <SetupCC1020TX+0x10c>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     452:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     454:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     456:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     458:	8b e2       	ldi	r24, 0x2B	; 43
     45a:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     45c:	77 9b       	sbis	0x0e, 7	; 14
     45e:	fe cf       	rjmp	.-4      	; 0x45c <SetupCC1020TX+0x11a>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     460:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     462:	80 e2       	ldi	r24, 0x20	; 32
     464:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     466:	77 9b       	sbis	0x0e, 7	; 14
     468:	fe cf       	rjmp	.-4      	; 0x466 <SetupCC1020TX+0x124>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     46a:	c4 9a       	sbi	0x18, 4	; 24
  // Configure LOCK pin to continuous lock status. Active low indicates PLL in lock
  WriteToCC1020Register(CC1020_LOCK,0x20);

  // Return LOCK status to application
  return (lock_status);
}
     46c:	82 2f       	mov	r24, r18
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <SetupCC1020RX>:
	than CS threshold. The CS threshold is set using CS_level[4:0] bits in VGA4 
	register.
*/

char SetupCC1020RX(char RXANALOG1, char PA_POWER1)
{
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	00 d0       	rcall	.+0      	; 0x480 <SetupCC1020RX+0x6>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     484:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     486:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     48c:	77 9b       	sbis	0x0e, 7	; 14
     48e:	fe cf       	rjmp	.-4      	; 0x48c <SetupCC1020RX+0x12>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     494:	77 9b       	sbis	0x0e, 7	; 14
     496:	fe cf       	rjmp	.-4      	; 0x494 <SetupCC1020RX+0x1a>
	Value=SPDR;
     498:	9f b1       	in	r25, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     49a:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     49c:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     49e:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     4a4:	77 9b       	sbis	0x0e, 7	; 14
     4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <SetupCC1020RX+0x2a>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     4a8:	8f b1       	in	r24, 0x0f	; 15
{
  volatile int TimeOutCounter;
  char lock_status;
  
  // Turn ON DCLK_CS (Carrier Sense Squelch) in RX
  WriteToCC1020Register(CC1020_INTERFACE,ReadFromCC1020Register(CC1020_INTERFACE) | 0x10);
     4aa:	90 61       	ori	r25, 0x10	; 16
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
	SPDR=data;
     4ac:	9f b9       	out	0x0f, r25	; 15

	while (! (SPSR & (1<<SPIF)));
     4ae:	77 9b       	sbis	0x0e, 7	; 14
     4b0:	fe cf       	rjmp	.-4      	; 0x4ae <SetupCC1020RX+0x34>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     4b2:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     4b4:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     4b6:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     4bc:	77 9b       	sbis	0x0e, 7	; 14
     4be:	fe cf       	rjmp	.-4      	; 0x4bc <SetupCC1020RX+0x42>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     4c0:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     4c2:	81 e1       	ldi	r24, 0x11	; 17
     4c4:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     4c6:	77 9b       	sbis	0x0e, 7	; 14
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <SetupCC1020RX+0x4c>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     4ca:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     4cc:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     4ce:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     4d0:	8f e2       	ldi	r24, 0x2F	; 47
     4d2:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     4d4:	77 9b       	sbis	0x0e, 7	; 14
     4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <SetupCC1020RX+0x5a>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     4d8:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     4da:	87 e4       	ldi	r24, 0x47	; 71
     4dc:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     4de:	77 9b       	sbis	0x0e, 7	; 14
     4e0:	fe cf       	rjmp	.-4      	; 0x4de <SetupCC1020RX+0x64>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     4e2:	c4 9a       	sbi	0x18, 4	; 24

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,RXANALOG);

  // Monitor LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0)&&(TimeOutCounter>0); TimeOutCounter--)
     4e4:	8e e1       	ldi	r24, 0x1E	; 30
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	9a 83       	std	Y+2, r25	; 0x02
     4ea:	89 83       	std	Y+1, r24	; 0x01
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
	Value=SPDR;
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     4ec:	50 e8       	ldi	r21, 0x80	; 128

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     4ee:	4f ef       	ldi	r20, 0xFF	; 255
     4f0:	20 ed       	ldi	r18, 0xD0	; 208
     4f2:	37 e0       	ldi	r19, 0x07	; 7
     4f4:	08 c0       	rjmp	.+16     	; 0x506 <SetupCC1020RX+0x8c>
     4f6:	c9 01       	movw	r24, r18
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <SetupCC1020RX+0x7e>

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,RXANALOG);

  // Monitor LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0)&&(TimeOutCounter>0); TimeOutCounter--)
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	89 83       	std	Y+1, r24	; 0x01
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     506:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     508:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     50a:	5f b9       	out	0x0f, r21	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     50c:	77 9b       	sbis	0x0e, 7	; 14
     50e:	fe cf       	rjmp	.-4      	; 0x50c <SetupCC1020RX+0x92>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     510:	4f b9       	out	0x0f, r20	; 15
	while (! (SPSR & (1<<SPIF)));
     512:	77 9b       	sbis	0x0e, 7	; 14
     514:	fe cf       	rjmp	.-4      	; 0x512 <SetupCC1020RX+0x98>
	Value=SPDR;
     516:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     518:	c4 9a       	sbi	0x18, 4	; 24

  // Setup bias current adjustment
  WriteToCC1020Register(CC1020_ANALOG,RXANALOG);

  // Monitor LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0)&&(TimeOutCounter>0); TimeOutCounter--)
     51a:	84 fd       	sbrc	r24, 4
     51c:	05 c0       	rjmp	.+10     	; 0x528 <SetupCC1020RX+0xae>
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	18 16       	cp	r1, r24
     524:	19 06       	cpc	r1, r25
     526:	3c f3       	brlt	.-50     	; 0x4f6 <SetupCC1020RX+0x7c>
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     528:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     52a:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     52c:	80 e8       	ldi	r24, 0x80	; 128
     52e:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     530:	77 9b       	sbis	0x0e, 7	; 14
     532:	fe cf       	rjmp	.-4      	; 0x530 <SetupCC1020RX+0xb6>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     538:	77 9b       	sbis	0x0e, 7	; 14
     53a:	fe cf       	rjmp	.-4      	; 0x538 <SetupCC1020RX+0xbe>
	Value=SPDR;
     53c:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     53e:	c4 9a       	sbi	0x18, 4	; 24
  // Monitor LOCK
  for(TimeOutCounter=30; ((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0)&&(TimeOutCounter>0); TimeOutCounter--)
  {_delay_ms(1);}

  // If PLL in lock 
  if((ReadFromCC1020Register(CC1020_STATUS)&0x10)==0x10)
     540:	84 fd       	sbrc	r24, 4
     542:	05 c0       	rjmp	.+10     	; 0x54e <SetupCC1020RX+0xd4>
	sbi(PORTA,LED_PLL);
  }
  else	// Recalibrate
  {
    // If recalibration ok
		if(CalibrateCC1020(PA_POWER1))
     544:	86 2f       	mov	r24, r22
     546:	0e 94 02 01 	call	0x204	; 0x204 <CalibrateCC1020>
     54a:	89 2b       	or	r24, r25
     54c:	19 f0       	breq	.+6      	; 0x554 <SetupCC1020RX+0xda>
		{
		lock_status = TRUE;
		sbi(PORTA,LED_PLL);
     54e:	d9 9a       	sbi	0x1b, 1	; 27
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	02 c0       	rjmp	.+4      	; 0x558 <SetupCC1020RX+0xde>
		// Else (recalibration failed)
		}
	   else
	   {
		lock_status = FALSE;
		cbi(PORTA,LED_PLL);
     554:	d9 98       	cbi	0x1b, 1	; 27
     556:	90 e0       	ldi	r25, 0x00	; 0
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     558:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     55a:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     560:	77 9b       	sbis	0x0e, 7	; 14
     562:	fe cf       	rjmp	.-4      	; 0x560 <SetupCC1020RX+0xe6>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     564:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     56a:	77 9b       	sbis	0x0e, 7	; 14
     56c:	fe cf       	rjmp	.-4      	; 0x56a <SetupCC1020RX+0xf0>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     56e:	c4 9a       	sbi	0x18, 4	; 24
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     570:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     572:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     574:	8b e2       	ldi	r24, 0x2B	; 43
     576:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     578:	77 9b       	sbis	0x0e, 7	; 14
     57a:	fe cf       	rjmp	.-4      	; 0x578 <SetupCC1020RX+0xfe>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     57c:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     57e:	80 e4       	ldi	r24, 0x40	; 64
     580:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     582:	77 9b       	sbis	0x0e, 7	; 14
     584:	fe cf       	rjmp	.-4      	; 0x582 <SetupCC1020RX+0x108>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     586:	c4 9a       	sbi	0x18, 4	; 24
  // Configure LOCK pin to indicate carrier sense. Active low when RSSI above threshold
  WriteToCC1020Register(CC1020_LOCK,0x40);

  // Return LOCK status to application
  return (lock_status);
}
     588:	89 2f       	mov	r24, r25
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	08 95       	ret

00000594 <Transmitpacket>:

	short int bytecounter,bitcounter;
	unsigned char dummy;
	int count=0,d;
	
	for(bytecounter=1;bytecounter<=no_bytes_tosend;bytecounter++)
     594:	80 91 5b 01 	lds	r24, 0x015B
     598:	90 91 5c 01 	lds	r25, 0x015C
     59c:	41 e0       	ldi	r20, 0x01	; 1
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	1c c0       	rjmp	.+56     	; 0x5de <Transmitpacket+0x4a>
	{
	 dummy=TXBUFFER[bytecounter-1];
     5a6:	fa 01       	movw	r30, r20
     5a8:	e5 54       	subi	r30, 0x45	; 69
     5aa:	fe 4f       	sbci	r31, 0xFE	; 254
     5ac:	e0 81       	ld	r30, Z
	 sbi(PORTA,LED_TEST1);
     5ae:	da 9a       	sbi	0x1b, 2	; 27
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	30 e0       	ldi	r19, 0x00	; 0
	 for(bitcounter=1;bitcounter<=8;bitcounter++)
		{
			while ( !(PINB&(1<<DCLK)) );	// put new data on negative edge of DCLK
     5b4:	b2 9b       	sbis	0x16, 2	; 22
     5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <Transmitpacket+0x20>
			while (PINB&(1<<DCLK));			// since by then it is stable
     5b8:	b2 99       	sbic	0x16, 2	; 22
     5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <Transmitpacket+0x24>
			//_delay_us(100);
			
			if((dummy&0x80)==0x80) sbi(PORTB,DIO);
     5bc:	e7 ff       	sbrs	r30, 7
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <Transmitpacket+0x30>
     5c0:	c1 9a       	sbi	0x18, 1	; 24
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <Transmitpacket+0x32>
			else cbi(PORTB,DIO);
     5c4:	c1 98       	cbi	0x18, 1	; 24
	
	for(bytecounter=1;bytecounter<=no_bytes_tosend;bytecounter++)
	{
	 dummy=TXBUFFER[bytecounter-1];
	 sbi(PORTA,LED_TEST1);
	 for(bitcounter=1;bitcounter<=8;bitcounter++)
     5c6:	2f 5f       	subi	r18, 0xFF	; 255
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	29 30       	cpi	r18, 0x09	; 9
     5cc:	31 05       	cpc	r19, r1
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <Transmitpacket+0x40>
			while (PINB&(1<<DCLK));			// since by then it is stable
			//_delay_us(100);
			
			if((dummy&0x80)==0x80) sbi(PORTB,DIO);
			else cbi(PORTB,DIO);
			dummy=dummy<<1;
     5d0:	ee 0f       	add	r30, r30
     5d2:	f0 cf       	rjmp	.-32     	; 0x5b4 <Transmitpacket+0x20>
     5d4:	68 5f       	subi	r22, 0xF8	; 248
     5d6:	7f 4f       	sbci	r23, 0xFF	; 255
			count++;
		}
	cbi(PORTA,LED_TEST1);
     5d8:	da 98       	cbi	0x1b, 2	; 27

	short int bytecounter,bitcounter;
	unsigned char dummy;
	int count=0,d;
	
	for(bytecounter=1;bytecounter<=no_bytes_tosend;bytecounter++)
     5da:	4f 5f       	subi	r20, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	84 17       	cp	r24, r20
     5e0:	95 07       	cpc	r25, r21
     5e2:	0c f7       	brge	.-62     	; 0x5a6 <Transmitpacket+0x12>
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	30 e0       	ldi	r19, 0x00	; 0
	
	// Addition of two dummy bits
	
	for(d=1;d<=2;d++)
	{
		while ( !(PINB&(1<<DCLK)) );	// put new data on negative edge of DCLK
     5e8:	b2 9b       	sbis	0x16, 2	; 22
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <Transmitpacket+0x54>
		while (PINB&(1<<DCLK));			// since by then it is stable
     5ec:	b2 99       	sbic	0x16, 2	; 22
     5ee:	fe cf       	rjmp	.-4      	; 0x5ec <Transmitpacket+0x58>
		//_delay_us(100);
		
		sbi(PORTB,DIO);
     5f0:	c1 9a       	sbi	0x18, 1	; 24
	
	}
	
	// Addition of two dummy bits
	
	for(d=1;d<=2;d++)
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	23 30       	cpi	r18, 0x03	; 3
     5f8:	31 05       	cpc	r19, r1
     5fa:	b1 f7       	brne	.-20     	; 0x5e8 <Transmitpacket+0x54>
		sbi(PORTB,DIO);
	}
	
	return(count);
		
}
     5fc:	cb 01       	movw	r24, r22
     5fe:	08 95       	ret

00000600 <ReadNumberofBytes>:
	return(rxcount);
}	


void ReadNumberofBytes(int number_of_bytes)
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
     606:	a0 91 fe 01 	lds	r26, 0x01FE
     60a:	b0 91 ff 01 	lds	r27, 0x01FF
     60e:	40 91 53 01 	lds	r20, 0x0153
     612:	50 91 54 01 	lds	r21, 0x0154
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	17 c0       	rjmp	.+46     	; 0x64c <ReadNumberofBytes+0x4c>
	short int bytecounter,bitcounter;
	char byte=0x00;
	for(bytecounter=1;bytecounter<=number_of_bytes;bytecounter++)		
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
	{
	 for(bitcounter=1;bitcounter<=8;bitcounter++)
		{
			while (PINB&(1<<DCLK));			// read data on rising edge of DCLK
     622:	b2 99       	sbic	0x16, 2	; 22
     624:	fe cf       	rjmp	.-4      	; 0x622 <ReadNumberofBytes+0x22>
			while (!(PINB&(1<<DCLK)));			// since by then it is stable
     626:	b2 9b       	sbis	0x16, 2	; 22
     628:	fe cf       	rjmp	.-4      	; 0x626 <ReadNumberofBytes+0x26>
			//_delay_us(100);
			byte=byte<<1;						// Important! First shift left then write
     62a:	88 0f       	add	r24, r24
			
			if(PINB & (1<<DIO))
     62c:	b1 99       	sbic	0x16, 1	; 22
			{byte |= 0x01;}
     62e:	81 60       	ori	r24, 0x01	; 1
{
	short int bytecounter,bitcounter;
	char byte=0x00;
	for(bytecounter=1;bytecounter<=number_of_bytes;bytecounter++)		
	{
	 for(bitcounter=1;bitcounter<=8;bitcounter++)
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	29 30       	cpi	r18, 0x09	; 9
     636:	31 05       	cpc	r19, r1
     638:	a1 f7       	brne	.-24     	; 0x622 <ReadNumberofBytes+0x22>
			{byte |= 0x01;}
	
			else byte &= 0xFE;
			rxcount++;
		}
	 RXBUFFER[curr_buffer_index]=byte;
     63a:	fd 01       	movw	r30, r26
     63c:	e2 5a       	subi	r30, 0xA2	; 162
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	80 83       	st	Z, r24

void ReadNumberofBytes(int number_of_bytes)
{
	short int bytecounter,bitcounter;
	char byte=0x00;
	for(bytecounter=1;bytecounter<=number_of_bytes;bytecounter++)		
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	11 96       	adiw	r26, 0x01	; 1
     648:	48 5f       	subi	r20, 0xF8	; 248
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	c6 17       	cp	r28, r22
     64e:	d7 07       	cpc	r29, r23
     650:	34 f7       	brge	.-52     	; 0x61e <ReadNumberofBytes+0x1e>
     652:	40 93 53 01 	sts	0x0153, r20
     656:	50 93 54 01 	sts	0x0154, r21
     65a:	b0 93 ff 01 	sts	0x01FF, r27
     65e:	a0 93 fe 01 	sts	0x01FE, r26
	 RXBUFFER[curr_buffer_index]=byte;
	 curr_buffer_index++;
	 
	}

}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <Receivepacket>:
	unsigned char dummy=0x00;
//	unsigned char reg=0x00;
	char prev_bit=1;
	char Preamblefound=0, SOF=0, err_flag=0;
	curr_buffer_index=0;
	no_databytes_toread=0;
     668:	10 92 fd 01 	sts	0x01FD, r1
     66c:	10 92 fc 01 	sts	0x01FC, r1
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     670:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     672:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     674:	84 e8       	ldi	r24, 0x84	; 132
     676:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     678:	77 9b       	sbis	0x0e, 7	; 14
     67a:	fe cf       	rjmp	.-4      	; 0x678 <Receivepacket+0x10>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     680:	77 9b       	sbis	0x0e, 7	; 14
     682:	fe cf       	rjmp	.-4      	; 0x680 <Receivepacket+0x18>
	Value=SPDR;
     684:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     686:	c4 9a       	sbi	0x18, 4	; 24
	char Preamblefound=0, SOF=0, err_flag=0;
	curr_buffer_index=0;
	no_databytes_toread=0;
	rxcount=0;
	
	RXBUFFER[curr_buffer_index]=ReadFromCC1020Register(CC1020_RSSI);	//RXBUFFER[0]=RSSI
     688:	80 93 5e 01 	sts	0x015E, r24
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     68c:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     68e:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     690:	80 e8       	ldi	r24, 0x80	; 128
     692:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     694:	77 9b       	sbis	0x0e, 7	; 14
     696:	fe cf       	rjmp	.-4      	; 0x694 <Receivepacket+0x2c>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     69c:	77 9b       	sbis	0x0e, 7	; 14
     69e:	fe cf       	rjmp	.-4      	; 0x69c <Receivepacket+0x34>
	Value=SPDR;
     6a0:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     6a2:	c4 9a       	sbi	0x18, 4	; 24
	no_databytes_toread=0;
	rxcount=0;
	
	RXBUFFER[curr_buffer_index]=ReadFromCC1020Register(CC1020_RSSI);	//RXBUFFER[0]=RSSI
	curr_buffer_index++;
	RXBUFFER[curr_buffer_index]=ReadFromCC1020Register(CC1020_STATUS);	//RXBUFFER[1]=STATUS	
     6a4:	80 93 5f 01 	sts	0x015F, r24
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
	
	// Detect preamble.
	while(!Preamblefound)
	{
		// Read first bit
		 while (PINB&(1<<DCLK));			// read data on rising edge of DCLK
     6ae:	b2 99       	sbic	0x16, 2	; 22
     6b0:	fe cf       	rjmp	.-4      	; 0x6ae <Receivepacket+0x46>
		 while (!(PINB&(1<<DCLK)));		// since by then it is stable
     6b2:	b2 9b       	sbis	0x16, 2	; 22
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <Receivepacket+0x4a>
		 //_delay_us(100);
		  
		 if(PINB & (1<<DIO))				// Is the first bit 1?
     6b6:	b1 9b       	sbis	0x16, 1	; 22
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <Receivepacket+0x5c>
		{
			if(prev_bit==0)					// 01 found, increment count
     6ba:	88 23       	and	r24, r24
     6bc:	51 f4       	brne	.+20     	; 0x6d2 <Receivepacket+0x6a>
			rxcount=rxcount+2;
     6be:	4e 5f       	subi	r20, 0xFE	; 254
     6c0:	5f 4f       	sbci	r21, 0xFF	; 255
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <Receivepacket+0x76>
			rxcount=0;
		}
		 else								
		{
			// No, first bit is 0. Next read second bit
			while (PINB&(1<<DCLK));			
     6c4:	b2 99       	sbic	0x16, 2	; 22
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <Receivepacket+0x5c>
			while (!(PINB&(1<<DCLK)));	
     6c8:	b2 9b       	sbis	0x16, 2	; 22
     6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <Receivepacket+0x60>
			//_delay_us(100);
			
			if(PINB & (1<<DIO))			// Is 2nd bit 1?
     6cc:	b1 99       	sbic	0x16, 1	; 22
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <Receivepacket+0x70>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <Receivepacket+0x76>
				{
				prev_bit=1;
				rxcount=rxcount+2;				// 01 found, increment count
     6d8:	4e 5f       	subi	r20, 0xFE	; 254
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	81 e0       	ldi	r24, 0x01	; 1
				rxcount=0;
				}
		}
			
		//if(rxcount==40)	// 5 bytes of preamble received. This is value is changeable.
		if(rxcount==56)		// 7 bytes of preamble received. This is value is changeable.
     6de:	48 33       	cpi	r20, 0x38	; 56
     6e0:	51 05       	cpc	r21, r1
     6e2:	29 f7       	brne	.-54     	; 0x6ae <Receivepacket+0x46>
     6e4:	88 e3       	ldi	r24, 0x38	; 56
     6e6:	80 93 53 01 	sts	0x0153, r24
     6ea:	10 92 54 01 	sts	0x0154, r1
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
	while(!SOF)
	{	
		dummy=0x00;
		for(int l=1;l<=8;l++)			// Read 8 bits. 
		{
			while (PINB&(1<<DCLK));			
     6f4:	b2 99       	sbic	0x16, 2	; 22
     6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <Receivepacket+0x8c>
			while (!(PINB&(1<<DCLK)));
     6f8:	b2 9b       	sbis	0x16, 2	; 22
     6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <Receivepacket+0x90>
			//_delay_us(100);
			
			dummy=dummy<<1;
     6fc:	22 0f       	add	r18, r18
			if(PINB & (1<<DIO))
     6fe:	b1 99       	sbic	0x16, 1	; 22
				{dummy |= 0x01;}
     700:	21 60       	ori	r18, 0x01	; 1
	}*/
	
	while(!SOF)
	{	
		dummy=0x00;
		for(int l=1;l<=8;l++)			// Read 8 bits. 
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	89 30       	cpi	r24, 0x09	; 9
     706:	91 05       	cpc	r25, r1
     708:	a9 f7       	brne	.-22     	; 0x6f4 <Receivepacket+0x8c>
     70a:	07 c0       	rjmp	.+14     	; 0x71a <Receivepacket+0xb2>
			else dummy &= 0xFE;
		}
		
		while (dummy != flag)
		{
			while (PINB&(1<<DCLK));			
     70c:	b2 99       	sbic	0x16, 2	; 22
     70e:	fe cf       	rjmp	.-4      	; 0x70c <Receivepacket+0xa4>
			while (!(PINB&(1<<DCLK)));
     710:	b2 9b       	sbis	0x16, 2	; 22
     712:	fe cf       	rjmp	.-4      	; 0x710 <Receivepacket+0xa8>
			//_delay_us(100);
			dummy=dummy<<1;
     714:	22 0f       	add	r18, r18
			if(PINB & (1<<DIO))
     716:	b1 99       	sbic	0x16, 1	; 22
			{dummy |= 0x01;}
     718:	21 60       	ori	r18, 0x01	; 1
			if(PINB & (1<<DIO))
				{dummy |= 0x01;}
			else dummy &= 0xFE;
		}
		
		while (dummy != flag)
     71a:	2e 37       	cpi	r18, 0x7E	; 126
     71c:	b9 f7       	brne	.-18     	; 0x70c <Receivepacket+0xa4>
			{dummy |= 0x01;}
			else dummy &= 0xFE;
		}
		
		SOF = 1;
		RXBUFFER[curr_buffer_index]=rxcount;		//RXBUFFER[2]=No. of bits of preamble received. 
     71e:	40 93 60 01 	sts	0x0160, r20
		curr_buffer_index++;
				
		RXBUFFER[curr_buffer_index]=dummy;			//RXBUFFER[3]=SOF_1 / flag
     722:	20 93 61 01 	sts	0x0161, r18
		curr_buffer_index++;
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	90 93 ff 01 	sts	0x01FF, r25
     72e:	80 93 fe 01 	sts	0x01FE, r24
		/*ReadNumberofBytes(2);						//RXBUFFER[4]=SOF_2 & RXBUFFER[5]=Number of Data bytes to read
		curr_buffer_index--;			
		no_databytes_toread = RXBUFFER[curr_buffer_index];
		curr_buffer_index++;*/
				
		ReadNumberofBytes(1);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 00 03 	call	0x600	; 0x600 <ReadNumberofBytes>
		curr_buffer_index--;
     73a:	20 91 fe 01 	lds	r18, 0x01FE
     73e:	30 91 ff 01 	lds	r19, 0x01FF
		curr_byte = RXBUFFER[curr_buffer_index];
     742:	f9 01       	movw	r30, r18
     744:	e3 5a       	subi	r30, 0xA3	; 163
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	80 81       	ld	r24, Z
     74a:	80 93 57 01 	sts	0x0157, r24
     74e:	10 92 58 01 	sts	0x0158, r1
		curr_buffer_index++;
				
		//if((RXBUFFER[3] != SOF_1) || (RXBUFFER[4] != SOF_2))
		if((RXBUFFER[3] != flag))
     752:	80 91 61 01 	lds	r24, 0x0161
     756:	8e 37       	cpi	r24, 0x7E	; 126
     758:	e1 f0       	breq	.+56     	; 0x792 <Receivepacket+0x12a>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	24 c0       	rjmp	.+72     	; 0x7a8 <Receivepacket+0x140>
		}
		
	//ReadNumberofBytes(no_databytes_toread);
	while (curr_byte != flag)
	{
	ReadNumberofBytes(1);
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 00 03 	call	0x600	; 0x600 <ReadNumberofBytes>
	curr_buffer_index--;
     768:	80 91 fe 01 	lds	r24, 0x01FE
     76c:	90 91 ff 01 	lds	r25, 0x01FF
     770:	fc 01       	movw	r30, r24
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	f0 93 ff 01 	sts	0x01FF, r31
     778:	e0 93 fe 01 	sts	0x01FE, r30
	curr_byte = RXBUFFER[curr_buffer_index];
     77c:	e2 5a       	subi	r30, 0xA2	; 162
     77e:	fe 4f       	sbci	r31, 0xFE	; 254
     780:	20 81       	ld	r18, Z
     782:	20 93 57 01 	sts	0x0157, r18
     786:	10 92 58 01 	sts	0x0158, r1
	curr_buffer_index++;	
     78a:	90 93 ff 01 	sts	0x01FF, r25
     78e:	80 93 fe 01 	sts	0x01FE, r24
		{
		   return(0);
		}
		
	//ReadNumberofBytes(no_databytes_toread);
	while (curr_byte != flag)
     792:	80 91 57 01 	lds	r24, 0x0157
     796:	90 91 58 01 	lds	r25, 0x0158
     79a:	8e 37       	cpi	r24, 0x7E	; 126
     79c:	91 05       	cpc	r25, r1
     79e:	01 f7       	brne	.-64     	; 0x760 <Receivepacket+0xf8>
	curr_buffer_index--;
	curr_byte = RXBUFFER[curr_buffer_index];
	curr_buffer_index++;	
	}
	
	return(rxcount);
     7a0:	20 91 53 01 	lds	r18, 0x0153
     7a4:	30 91 54 01 	lds	r19, 0x0154
}	
     7a8:	c9 01       	movw	r24, r18
     7aa:	08 95       	ret

000007ac <ReadRSSIlevelCC1020>:
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     7ac:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     7ae:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     7b0:	80 e2       	ldi	r24, 0x20	; 32
     7b2:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     7b4:	77 9b       	sbis	0x0e, 7	; 14
     7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <ReadRSSIlevelCC1020+0x8>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     7bc:	77 9b       	sbis	0x0e, 7	; 14
     7be:	fe cf       	rjmp	.-4      	; 0x7bc <ReadRSSIlevelCC1020+0x10>
	Value=SPDR;
     7c0:	ef b1       	in	r30, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     7c2:	c4 9a       	sbi	0x18, 4	; 24
  200  => VGA3 = 0x30 => VGA_SETTING = 0x10 = 16dec
  500  => VGA3 = 0x34 => VGA_SETTING = 0x14 = 20dec
  */

  // Get current channel spacing
  FILTER = ReadFromCC1020Register(CC1020_FILTER)&0x7F;
     7c4:	ef 77       	andi	r30, 0x7F	; 127
  //for(i = 0; i < 5; i++) {
  //  RSSI[i] = ReadFromCC1020Register(CC1020_RSSI);
  //}
  //RSSI_dBm = (int)((((unsigned int)RSSI[0]+(unsigned int)RSSI[1]+(unsigned int)RSSI[2]+(unsigned int)RSSI[3]+(unsigned int)RSSI[4])*3)/(2*5));
  
  RSSI_dBm = RXBUFFER[0];	
     7c6:	40 91 5e 01 	lds	r20, 0x015E
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     7ca:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     7cc:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     7ce:	86 e2       	ldi	r24, 0x26	; 38
     7d0:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     7d2:	77 9b       	sbis	0x0e, 7	; 14
     7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <ReadRSSIlevelCC1020+0x26>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     7da:	77 9b       	sbis	0x0e, 7	; 14
     7dc:	fe cf       	rjmp	.-4      	; 0x7da <ReadRSSIlevelCC1020+0x2e>
	Value=SPDR;
     7de:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     7e0:	c4 9a       	sbi	0x18, 4	; 24
  //  RSSI[i] = ReadFromCC1020Register(CC1020_RSSI);
  //}
  //RSSI_dBm = (int)((((unsigned int)RSSI[0]+(unsigned int)RSSI[1]+(unsigned int)RSSI[2]+(unsigned int)RSSI[3]+(unsigned int)RSSI[4])*3)/(2*5));
  
  RSSI_dBm = RXBUFFER[0];	
  RSSI_dBm = ((RSSI_dBm*3) - (3*(int)(ReadFromCC1020Register(CC1020_VGA3)&0x1F)*2)) / 2;		// RSSI w/o offset
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	8f 71       	andi	r24, 0x1F	; 31
     7e6:	90 70       	andi	r25, 0x00	; 0
     7e8:	2a ef       	ldi	r18, 0xFA	; 250
     7ea:	3f ef       	ldi	r19, 0xFF	; 255
     7ec:	bc 01       	movw	r22, r24
     7ee:	62 9f       	mul	r22, r18
     7f0:	c0 01       	movw	r24, r0
     7f2:	63 9f       	mul	r22, r19
     7f4:	90 0d       	add	r25, r0
     7f6:	72 9f       	mul	r23, r18
     7f8:	90 0d       	add	r25, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	23 e0       	ldi	r18, 0x03	; 3
     7fe:	42 9f       	mul	r20, r18
     800:	90 01       	movw	r18, r0
     802:	11 24       	eor	r1, r1
     804:	82 0f       	add	r24, r18
     806:	93 1f       	adc	r25, r19
     808:	62 e0       	ldi	r22, 0x02	; 2
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divmodhi4>
     810:	9b 01       	movw	r18, r22
     812:	ab 01       	movw	r20, r22
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     814:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     816:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     818:	8e e2       	ldi	r24, 0x2E	; 46
     81a:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     81c:	77 9b       	sbis	0x0e, 7	; 14
     81e:	fe cf       	rjmp	.-4      	; 0x81c <ReadRSSIlevelCC1020+0x70>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     824:	77 9b       	sbis	0x0e, 7	; 14
     826:	fe cf       	rjmp	.-4      	; 0x824 <ReadRSSIlevelCC1020+0x78>
	Value=SPDR;
     828:	8f b1       	in	r24, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     82a:	c4 9a       	sbi	0x18, 4	; 24
  RSSI_dBm = RXBUFFER[0];	
  RSSI_dBm = ((RSSI_dBm*3) - (3*(int)(ReadFromCC1020Register(CC1020_VGA3)&0x1F)*2)) / 2;		// RSSI w/o offset

  // Calculate average RSSI in dBm with offset, according to frequency band:
  // Active frequency is in 800 MHz band
  if( (ReadFromCC1020Register(CC1020_ANALOG)&0x80) == 0x80 ) 
     82c:	87 ff       	sbrs	r24, 7
     82e:	1e c0       	rjmp	.+60     	; 0x86c <__stack+0xd>
  {
    switch ( FILTER ) 
     830:	e5 32       	cpi	r30, 0x25	; 37
     832:	c1 f0       	breq	.+48     	; 0x864 <__stack+0x5>
     834:	e6 32       	cpi	r30, 0x26	; 38
     836:	38 f4       	brcc	.+14     	; 0x846 <ReadRSSIlevelCC1020+0x9a>
     838:	e1 30       	cpi	r30, 0x01	; 1
     83a:	69 f1       	breq	.+90     	; 0x896 <__stack+0x37>
     83c:	e1 30       	cpi	r30, 0x01	; 1
     83e:	78 f1       	brcs	.+94     	; 0x89e <__stack+0x3f>
     840:	e2 32       	cpi	r30, 0x22	; 34
     842:	c1 f5       	brne	.+112    	; 0x8b4 <__stack+0x55>
     844:	28 c0       	rjmp	.+80     	; 0x896 <__stack+0x37>
     846:	ef 32       	cpi	r30, 0x2F	; 47
     848:	69 f0       	breq	.+26     	; 0x864 <__stack+0x5>
     84a:	e0 33       	cpi	r30, 0x30	; 48
     84c:	18 f4       	brcc	.+6      	; 0x854 <ReadRSSIlevelCC1020+0xa8>
     84e:	eb 32       	cpi	r30, 0x2B	; 43
     850:	89 f5       	brne	.+98     	; 0x8b4 <__stack+0x55>
     852:	04 c0       	rjmp	.+8      	; 0x85c <ReadRSSIlevelCC1020+0xb0>
     854:	ef 33       	cpi	r30, 0x3F	; 63
     856:	11 f0       	breq	.+4      	; 0x85c <ReadRSSIlevelCC1020+0xb0>
     858:	e8 35       	cpi	r30, 0x58	; 88
     85a:	61 f5       	brne	.+88     	; 0x8b4 <__stack+0x55>
        break;
      case 0x2F://25 kHz spacing
        RSSI_dBm = RSSI_dBm - 96;
        break;
      case 0x2B://50 kHz spacing
        RSSI_dBm = RSSI_dBm - 95;
     85c:	a9 01       	movw	r20, r18
     85e:	4f 55       	subi	r20, 0x5F	; 95
     860:	50 40       	sbci	r21, 0x00	; 0
     862:	28 c0       	rjmp	.+80     	; 0x8b4 <__stack+0x55>
        break;
      case 0x25://100 kHz spacing
        RSSI_dBm = RSSI_dBm - 96;
     864:	a9 01       	movw	r20, r18
     866:	40 56       	subi	r20, 0x60	; 96
     868:	50 40       	sbci	r21, 0x00	; 0
     86a:	24 c0       	rjmp	.+72     	; 0x8b4 <__stack+0x55>
    }
  // Active frequency is in 434 MHz band
  } 
  else 
  {
    switch ( FILTER ) {
     86c:	e5 32       	cpi	r30, 0x25	; 37
     86e:	99 f0       	breq	.+38     	; 0x896 <__stack+0x37>
     870:	e6 32       	cpi	r30, 0x26	; 38
     872:	38 f4       	brcc	.+14     	; 0x882 <__stack+0x23>
     874:	e1 30       	cpi	r30, 0x01	; 1
     876:	b9 f0       	breq	.+46     	; 0x8a6 <__stack+0x47>
     878:	e1 30       	cpi	r30, 0x01	; 1
     87a:	c8 f0       	brcs	.+50     	; 0x8ae <__stack+0x4f>
     87c:	e2 32       	cpi	r30, 0x22	; 34
     87e:	d1 f4       	brne	.+52     	; 0x8b4 <__stack+0x55>
     880:	0e c0       	rjmp	.+28     	; 0x89e <__stack+0x3f>
     882:	ef 32       	cpi	r30, 0x2F	; 47
     884:	81 f0       	breq	.+32     	; 0x8a6 <__stack+0x47>
     886:	e8 33       	cpi	r30, 0x38	; 56
     888:	71 f0       	breq	.+28     	; 0x8a6 <__stack+0x47>
     88a:	eb 32       	cpi	r30, 0x2B	; 43
     88c:	99 f4       	brne	.+38     	; 0x8b4 <__stack+0x55>
      case 0x38://12.5 kHz spacing
      case 0x2F://25 kHz spacing
        RSSI_dBm = RSSI_dBm - 102;
        break;
      case 0x2B://50 kHz spacing
        RSSI_dBm = RSSI_dBm - 100;
     88e:	a9 01       	movw	r20, r18
     890:	44 56       	subi	r20, 0x64	; 100
     892:	50 40       	sbci	r21, 0x00	; 0
     894:	0f c0       	rjmp	.+30     	; 0x8b4 <__stack+0x55>
        break;
      case 0x25://100 kHz spacing
        RSSI_dBm = RSSI_dBm - 99;
     896:	a9 01       	movw	r20, r18
     898:	43 56       	subi	r20, 0x63	; 99
     89a:	50 40       	sbci	r21, 0x00	; 0
     89c:	0b c0       	rjmp	.+22     	; 0x8b4 <__stack+0x55>
        break;
      case 0x22://150 kHz spacing
        RSSI_dBm = RSSI_dBm - 101;
     89e:	a9 01       	movw	r20, r18
     8a0:	45 56       	subi	r20, 0x65	; 101
     8a2:	50 40       	sbci	r21, 0x00	; 0
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <__stack+0x55>
        break;
      case 0x01://200 kHz spacing
        RSSI_dBm = RSSI_dBm - 102;
     8a6:	a9 01       	movw	r20, r18
     8a8:	46 56       	subi	r20, 0x66	; 102
     8aa:	50 40       	sbci	r21, 0x00	; 0
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <__stack+0x55>
        break;
      case 0x00://500 kHz spacing
        RSSI_dBm = RSSI_dBm - 103;
     8ae:	a9 01       	movw	r20, r18
     8b0:	47 56       	subi	r20, 0x67	; 103
     8b2:	50 40       	sbci	r21, 0x00	; 0
        break;
      }
  }

  return(RSSI_dBm);
}
     8b4:	ca 01       	movw	r24, r20
     8b6:	08 95       	ret

000008b8 <Initialise_SPI>:
#endif
*/	

void Initialise_SPI(void) 
{
	DDRB &= ~(1 << MISO);	// set port B SPI data input to input
     8b8:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1 << MOSI);	// set port B SPI clock to output
     8ba:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= (1 << SCK);	// set port B SPI data out to output 
     8bc:	bf 9a       	sbi	0x17, 7	; 23
	DDRB |= (1 << SS_bar);	// set port B SPI chip select to output
     8be:	bc 9a       	sbi	0x17, 4	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (0 << SPR1) | (0 << SPR0);
     8c0:	80 e5       	ldi	r24, 0x50	; 80
     8c2:	8d b9       	out	0x0d, r24	; 13
	
	DDRB &= ~(1 << DCLK);	// set DCLK as input
     8c4:	ba 98       	cbi	0x17, 2	; 23
	
	//PORTB &= ~(1 << SS_bar);	// set chip select to low (MMC is selected)
}
     8c6:	08 95       	ret

000008c8 <Initialise_UART>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud rate: 19200
	UCSRA=0x00;
     8c8:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
     8ca:	88 e1       	ldi	r24, 0x18	; 24
     8cc:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
     8ce:	86 e8       	ldi	r24, 0x86	; 134
     8d0:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
     8d2:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x19;
     8d4:	89 e1       	ldi	r24, 0x19	; 25
     8d6:	89 b9       	out	0x09, r24	; 9
}
     8d8:	08 95       	ret

000008da <usart_transmit>:

void usart_transmit(char *buffer)
{
     8da:	fc 01       	movw	r30, r24
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <usart_transmit+0xc>
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     8de:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     8e0:	5d 9b       	sbis	0x0b, 5	; 11
     8e2:	fe cf       	rjmp	.-4      	; 0x8e0 <usart_transmit+0x6>
     8e4:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     8e6:	80 81       	ld	r24, Z
     8e8:	88 23       	and	r24, r24
     8ea:	c9 f7       	brne	.-14     	; 0x8de <usart_transmit+0x4>
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
		i++;
		
	
	}
}
     8ec:	08 95       	ret

000008ee <update_crc>:

void update_crc(unsigned int ch)
{
    unsigned char i, xor_flag;

    ch<<=8;
     8ee:	38 2f       	mov	r19, r24
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	40 91 59 01 	lds	r20, 0x0159
     8f6:	50 91 5a 01 	lds	r21, 0x015A
     8fa:	60 e0       	ldi	r22, 0x00	; 0

        crc = crc << 1;

        if (xor_flag)
        {
             crc = crc ^ poly;
     8fc:	e1 e2       	ldi	r30, 0x21	; 33
     8fe:	f0 e1       	ldi	r31, 0x10	; 16

    ch<<=8;

    for(i=0; i<8; i++)
    {
        if ((crc ^ ch) & 0x8000)    xor_flag = 1;
     900:	ca 01       	movw	r24, r20
     902:	82 27       	eor	r24, r18
     904:	93 27       	eor	r25, r19
        else			             xor_flag = 0;

        crc = crc << 1;
     906:	44 0f       	add	r20, r20
     908:	55 1f       	adc	r21, r21

        if (xor_flag)
     90a:	97 ff       	sbrs	r25, 7
     90c:	02 c0       	rjmp	.+4      	; 0x912 <update_crc+0x24>
        {
             crc = crc ^ poly;
     90e:	4e 27       	eor	r20, r30
     910:	5f 27       	eor	r21, r31
{
    unsigned char i, xor_flag;

    ch<<=8;

    for(i=0; i<8; i++)
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	68 30       	cpi	r22, 0x08	; 8
     916:	19 f0       	breq	.+6      	; 0x91e <update_crc+0x30>
        if (xor_flag)
        {
             crc = crc ^ poly;
        }

        ch = ch << 1;
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
     91c:	f1 cf       	rjmp	.-30     	; 0x900 <update_crc+0x12>
     91e:	50 93 5a 01 	sts	0x015A, r21
     922:	40 93 59 01 	sts	0x0159, r20
    }
}
     926:	08 95       	ret

00000928 <go>:
    go();
    return 0;
}

void go(void)
{
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	unsigned int ch, i, x, y, crch;
	//unsigned char crc_high, crc_low;

    crc = 0xFFFF;
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	9f ef       	ldi	r25, 0xFF	; 255
     932:	90 93 5a 01 	sts	0x015A, r25
     936:	80 93 59 01 	sts	0x0159, r24
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	d0 e0       	ldi	r29, 0x00	; 0
     93e:	20 c0       	rjmp	.+64     	; 0x980 <go+0x58>
 

	for (i=0; i< data_bytes; i++)
	{

		ch = data[i];
     940:	fe 01       	movw	r30, r28
     942:	e2 5c       	subi	r30, 0xC2	; 194
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	80 81       	ld	r24, Z
		x = ch;
		y = ch;
		x = x & 0xF0;
		x = x >> 4;
		ch = hex2ascii(x);
     948:	18 2f       	mov	r17, r24
     94a:	82 95       	swap	r24
     94c:	8f 70       	andi	r24, 0x0F	; 15
     94e:	28 2f       	mov	r18, r24
     950:	30 e0       	ldi	r19, 0x00	; 0


int hex2ascii (unsigned char val)
{
	unsigned int asc;
	if(val<=9)	asc=val+0x30;
     952:	8a 30       	cpi	r24, 0x0A	; 10
     954:	18 f4       	brcc	.+6      	; 0x95c <go+0x34>
     956:	c9 01       	movw	r24, r18
     958:	c0 96       	adiw	r24, 0x30	; 48
     95a:	02 c0       	rjmp	.+4      	; 0x960 <go+0x38>
	else		asc=val+0x37;
     95c:	c9 01       	movw	r24, r18
     95e:	c7 96       	adiw	r24, 0x37	; 55
		x = ch;
		y = ch;
		x = x & 0xF0;
		x = x >> 4;
		ch = hex2ascii(x);
		update_crc(ch);
     960:	0e 94 77 04 	call	0x8ee	; 0x8ee <update_crc>
		y = y & 0x0F;
		ch = hex2ascii(y);
     964:	81 2f       	mov	r24, r17
     966:	8f 70       	andi	r24, 0x0F	; 15
     968:	28 2f       	mov	r18, r24
     96a:	30 e0       	ldi	r19, 0x00	; 0


int hex2ascii (unsigned char val)
{
	unsigned int asc;
	if(val<=9)	asc=val+0x30;
     96c:	8a 30       	cpi	r24, 0x0A	; 10
     96e:	18 f4       	brcc	.+6      	; 0x976 <go+0x4e>
     970:	c9 01       	movw	r24, r18
     972:	c0 96       	adiw	r24, 0x30	; 48
     974:	02 c0       	rjmp	.+4      	; 0x97a <go+0x52>
	else		asc=val+0x37;
     976:	c9 01       	movw	r24, r18
     978:	c7 96       	adiw	r24, 0x37	; 55
		x = x >> 4;
		ch = hex2ascii(x);
		update_crc(ch);
		y = y & 0x0F;
		ch = hex2ascii(y);
		update_crc(ch);
     97a:	0e 94 77 04 	call	0x8ee	; 0x8ee <update_crc>
	//unsigned char crc_high, crc_low;

    crc = 0xFFFF;
 

	for (i=0; i< data_bytes; i++)
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	80 91 42 01 	lds	r24, 0x0142
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	c8 17       	cp	r28, r24
     988:	d9 07       	cpc	r29, r25
     98a:	d0 f2       	brcs	.-76     	; 0x940 <go+0x18>
		y = y & 0x0F;
		ch = hex2ascii(y);
		update_crc(ch);
	}

	crch = crc;
     98c:	80 91 59 01 	lds	r24, 0x0159
     990:	90 91 5a 01 	lds	r25, 0x015A
	crc_low = crch;
     994:	80 93 5d 01 	sts	0x015D, r24
	crch = crch >> 8;
	crc_high = crch;
     998:	90 93 52 01 	sts	0x0152, r25
	
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	08 95       	ret

000009a4 <cal_crc>:
int hex2ascii (unsigned char val);
void go(void);

int cal_crc(void)
{
    go();
     9a4:	0e 94 94 04 	call	0x928	; 0x928 <go>
    return 0;
}
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	08 95       	ret

000009ae <hex2ascii>:
    }
}


int hex2ascii (unsigned char val)
{
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int asc;
	if(val<=9)	asc=val+0x30;
     9b2:	8a 30       	cpi	r24, 0x0A	; 10
     9b4:	18 f4       	brcc	.+6      	; 0x9bc <hex2ascii+0xe>
     9b6:	20 5d       	subi	r18, 0xD0	; 208
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <hex2ascii+0x12>
	else		asc=val+0x37;
     9bc:	29 5c       	subi	r18, 0xC9	; 201
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
	return (asc);
}
     9c0:	c9 01       	movw	r24, r18
     9c2:	08 95       	ret

000009c4 <LoadTXBuffer>:
  
  no_bytes_tosend=17;

}*/
void LoadTXBuffer(void)
{
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
	//int i;
	int count=0;
        for ( i=0; i<=9; i++)
        {
        	TXBUFFER[i]=0x55;
     9d4:	45 e5       	ldi	r20, 0x55	; 85
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <LoadTXBuffer+0x1e>
     9d8:	fc 01       	movw	r30, r24
     9da:	e4 54       	subi	r30, 0x44	; 68
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	40 83       	st	Z, r20
			count++;
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	2f 5f       	subi	r18, 0xFF	; 255
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
}*/
void LoadTXBuffer(void)
{
	//int i;
	int count=0;
        for ( i=0; i<=9; i++)
     9e6:	8a 30       	cpi	r24, 0x0A	; 10
     9e8:	91 05       	cpc	r25, r1
     9ea:	b4 f3       	brlt	.-20     	; 0x9d8 <LoadTXBuffer+0x14>
        	TXBUFFER[i]=0x55;
			count++;
		}


			TXBUFFER[10]=flag;
     9ec:	8e e7       	ldi	r24, 0x7E	; 126
     9ee:	80 93 c6 01 	sts	0x01C6, r24
			count++;
     9f2:	e9 01       	movw	r28, r18
			TXBUFFER[11]=0x91;
			count++;
			TXBUFFER[12]=0x0E;
			count++;*/

        a = 10;
     9f4:	8a e0       	ldi	r24, 0x0A	; 10
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 4b 01 	sts	0x014B, r25
     9fc:	80 93 4a 01 	sts	0x014A, r24
		//a = 12;
        n = header_bytes;
     a00:	80 91 3d 01 	lds	r24, 0x013D
     a04:	a8 2f       	mov	r26, r24
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	b0 93 4d 01 	sts	0x014D, r27
     a0c:	a0 93 4c 01 	sts	0x014C, r26
     a10:	48 e3       	ldi	r20, 0x38	; 56
     a12:	51 e0       	ldi	r21, 0x01	; 1
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	0a c0       	rjmp	.+20     	; 0xa2e <LoadTXBuffer+0x6a>
		
        for (i=0; i<n; i++)
        {
            TXBUFFER[i+(a+1)]=header[i];
     a1a:	fa 01       	movw	r30, r20
     a1c:	81 91       	ld	r24, Z+
     a1e:	af 01       	movw	r20, r30
     a20:	f9 01       	movw	r30, r18
     a22:	e9 53       	subi	r30, 0x39	; 57
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	80 83       	st	Z, r24
			count++;
     a28:	21 96       	adiw	r28, 0x01	; 1
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255

        a = 10;
		//a = 12;
        n = header_bytes;
		
        for (i=0; i<n; i++)
     a2e:	2a 17       	cp	r18, r26
     a30:	3b 07       	cpc	r19, r27
     a32:	9c f3       	brlt	.-26     	; 0xa1a <LoadTXBuffer+0x56>
        {
            TXBUFFER[i+(a+1)]=header[i];
			count++;
        }
		
        m = data_bytes;
     a34:	80 91 42 01 	lds	r24, 0x0142
     a38:	68 2f       	mov	r22, r24
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	70 93 4f 01 	sts	0x014F, r23
     a40:	60 93 4e 01 	sts	0x014E, r22
     a44:	0e e3       	ldi	r16, 0x3E	; 62
     a46:	11 e0       	ldi	r17, 0x01	; 1
     a48:	ad 01       	movw	r20, r26
     a4a:	45 5f       	subi	r20, 0xF5	; 245
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	0c c0       	rjmp	.+24     	; 0xa6c <LoadTXBuffer+0xa8>
		
        for (i=0; i<m; i++)
        {
            TXBUFFER[i+(a+1+n)]=data[i];
     a54:	f8 01       	movw	r30, r16
     a56:	81 91       	ld	r24, Z+
     a58:	8f 01       	movw	r16, r30
     a5a:	fa 01       	movw	r30, r20
     a5c:	e4 54       	subi	r30, 0x44	; 68
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	80 83       	st	Z, r24
			count++;
     a62:	21 96       	adiw	r28, 0x01	; 1
     a64:	2f 5f       	subi	r18, 0xFF	; 255
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
			count++;
        }
		
        m = data_bytes;
		
        for (i=0; i<m; i++)
     a6c:	26 17       	cp	r18, r22
     a6e:	37 07       	cpc	r19, r23
     a70:	8c f3       	brlt	.-30     	; 0xa54 <LoadTXBuffer+0x90>
     a72:	30 93 49 01 	sts	0x0149, r19
     a76:	20 93 48 01 	sts	0x0148, r18
        {
            TXBUFFER[i+(a+1+n)]=data[i];
			count++;
        }

        b = a + n + m;
     a7a:	fd 01       	movw	r30, r26
     a7c:	e6 0f       	add	r30, r22
     a7e:	f7 1f       	adc	r31, r23
     a80:	3a 96       	adiw	r30, 0x0a	; 10
     a82:	f0 93 51 01 	sts	0x0151, r31
     a86:	e0 93 50 01 	sts	0x0150, r30
     a8a:	3a 97       	sbiw	r30, 0x0a	; 10
		
            TXBUFFER[b+1]=crc_high;
     a8c:	80 91 52 01 	lds	r24, 0x0152
     a90:	df 01       	movw	r26, r30
     a92:	a9 53       	subi	r26, 0x39	; 57
     a94:	be 4f       	sbci	r27, 0xFE	; 254
     a96:	8c 93       	st	X, r24
			count++;
			
            TXBUFFER[b+2]=crc_low;
     a98:	80 91 5d 01 	lds	r24, 0x015D
     a9c:	df 01       	movw	r26, r30
     a9e:	a8 53       	subi	r26, 0x38	; 56
     aa0:	be 4f       	sbci	r27, 0xFE	; 254
     aa2:	8c 93       	st	X, r24
			count++;
			
            TXBUFFER[b+3]=flag;
     aa4:	df 01       	movw	r26, r30
     aa6:	a7 53       	subi	r26, 0x37	; 55
     aa8:	be 4f       	sbci	r27, 0xFE	; 254
     aaa:	8e e7       	ldi	r24, 0x7E	; 126
     aac:	8c 93       	st	X, r24
			count++;
			
			TXBUFFER[b+4]=flag;
     aae:	e6 53       	subi	r30, 0x36	; 54
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	80 83       	st	Z, r24
			count++;
			
	no_bytes_tosend = count;
     ab4:	24 96       	adiw	r28, 0x04	; 4
     ab6:	d0 93 5c 01 	sts	0x015C, r29
     aba:	c0 93 5b 01 	sts	0x015B, r28
	/*for(int j=0;j <= no_bytes_tosend; j++)
	{
		sprintf(array1,"\n\rByte %d = %x",j,TXBUFFER[j]);
		usart_transmit(array1);
	}*/
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <SetupCC1020PD>:
/*  followed by SetupCC1020RX or WakeupCC1020ToTX followed by SetupCC1020TX */
/*  to wake up from power down                                              */
/****************************************************************************/

void SetupCC1020PD(void)
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	c4 56       	subi	r28, 0x64	; 100
     ad6:	d0 40       	sbci	r29, 0x00	; 0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     ae2:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     ae4:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     aea:	77 9b       	sbis	0x0e, 7	; 14
     aec:	fe cf       	rjmp	.-4      	; 0xaea <SetupCC1020PD+0x22>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     aee:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     af0:	8f e1       	ldi	r24, 0x1F	; 31
     af2:	8f b9       	out	0x0f, r24	; 15

	while (! (SPSR & (1<<SPIF)));
     af4:	77 9b       	sbis	0x0e, 7	; 14
     af6:	fe cf       	rjmp	.-4      	; 0xaf4 <SetupCC1020PD+0x2c>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     af8:	c4 9a       	sbi	0x18, 4	; 24
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     afa:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     afc:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     afe:	1f b8       	out	0x0f, r1	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     b00:	77 9b       	sbis	0x0e, 7	; 14
     b02:	fe cf       	rjmp	.-4      	; 0xb00 <SetupCC1020PD+0x38>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <SetupCC1020PD+0x40>
	Value=SPDR;
     b0c:	2f b1       	in	r18, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     b0e:	c4 9a       	sbi	0x18, 4	; 24
  // Put CC1020 into power-down
  WriteToCC1020Register(CC1020_MAIN,0x1F);
  
  x = ReadFromCC1020Register(CC1020_MAIN);
  
  sprintf(bufff,"Wake up complete : %d a\r\n",x);
     b10:	00 d0       	rcall	.+0      	; 0xb12 <SetupCC1020PD+0x4a>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <SetupCC1020PD+0x4c>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <SetupCC1020PD+0x4e>
     b16:	ed b7       	in	r30, 0x3d	; 61
     b18:	fe b7       	in	r31, 0x3e	; 62
     b1a:	31 96       	adiw	r30, 0x01	; 1
     b1c:	8e 01       	movw	r16, r28
     b1e:	0f 5f       	subi	r16, 0xFF	; 255
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	ad b7       	in	r26, 0x3d	; 61
     b24:	be b7       	in	r27, 0x3e	; 62
     b26:	12 96       	adiw	r26, 0x02	; 2
     b28:	1c 93       	st	X, r17
     b2a:	0e 93       	st	-X, r16
     b2c:	11 97       	sbiw	r26, 0x01	; 1
     b2e:	80 e6       	ldi	r24, 0x60	; 96
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	93 83       	std	Z+3, r25	; 0x03
     b34:	82 83       	std	Z+2, r24	; 0x02
     b36:	24 83       	std	Z+4, r18	; 0x04
     b38:	15 82       	std	Z+5, r1	; 0x05
     b3a:	0e 94 0a 07 	call	0xe14	; 0xe14 <sprintf>
  usart_transmit(bufff);
     b3e:	8d b7       	in	r24, 0x3d	; 61
     b40:	9e b7       	in	r25, 0x3e	; 62
     b42:	06 96       	adiw	r24, 0x06	; 6
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	9e bf       	out	0x3e, r25	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	8d bf       	out	0x3d, r24	; 61
     b4e:	c8 01       	movw	r24, r16
     b50:	0e 94 6d 04 	call	0x8da	; 0x8da <usart_transmit>
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     b54:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     b56:	8f b1       	in	r24, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     b58:	89 e3       	ldi	r24, 0x39	; 57
     b5a:	8f b9       	out	0x0f, r24	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     b5c:	77 9b       	sbis	0x0e, 7	; 14
     b5e:	fe cf       	rjmp	.-4      	; 0xb5c <SetupCC1020PD+0x94>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     b60:	8f b1       	in	r24, 0x0f	; 15
	SPDR=data;
     b62:	1f b8       	out	0x0f, r1	; 15

	while (! (SPSR & (1<<SPIF)));
     b64:	77 9b       	sbis	0x0e, 7	; 14
     b66:	fe cf       	rjmp	.-4      	; 0xb64 <SetupCC1020PD+0x9c>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     b68:	c4 9a       	sbi	0x18, 4	; 24
  sprintf(bufff,"Wake up complete : %d a\r\n",x);
  usart_transmit(bufff);

  // Turn off PA to minimise current draw
  WriteToCC1020Register(CC1020_PA_POWER,0x00);
}
     b6a:	cc 59       	subi	r28, 0x9C	; 156
     b6c:	df 4f       	sbci	r29, 0xFF	; 255
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <main>:

#endif


int main()
{
     b82:	6f 92       	push	r6
     b84:	7f 92       	push	r7
     b86:	8f 92       	push	r8
     b88:	9f 92       	push	r9
     b8a:	af 92       	push	r10
     b8c:	bf 92       	push	r11
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	6e 97       	sbiw	r28, 0x1e	; 30
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
	char array[30];
	int counter,pktcount = 0;
	DDRA = 0xFF;						// For LED indication
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	8a bb       	out	0x1a, r24	; 26
#endif
*/	

void Initialise_SPI(void) 
{
	DDRB &= ~(1 << MISO);	// set port B SPI data input to input
     bb2:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1 << MOSI);	// set port B SPI clock to output
     bb4:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= (1 << SCK);	// set port B SPI data out to output 
     bb6:	bf 9a       	sbi	0x17, 7	; 23
	DDRB |= (1 << SS_bar);	// set port B SPI chip select to output
     bb8:	bc 9a       	sbi	0x17, 4	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (0 << SPR1) | (0 << SPR0);
     bba:	80 e5       	ldi	r24, 0x50	; 80
     bbc:	8d b9       	out	0x0d, r24	; 13
	
	DDRB &= ~(1 << DCLK);	// set DCLK as input
     bbe:	ba 98       	cbi	0x17, 2	; 23
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud rate: 19200
	UCSRA=0x00;
     bc0:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
     bc2:	88 e1       	ldi	r24, 0x18	; 24
     bc4:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
     bc6:	86 e8       	ldi	r24, 0x86	; 134
     bc8:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
     bca:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x19;
     bcc:	89 e1       	ldi	r24, 0x19	; 25
     bce:	89 b9       	out	0x09, r24	; 9
	int counter,pktcount = 0;
	DDRA = 0xFF;						// For LED indication
	
	Initialise_SPI();
	Initialise_UART();
	sbi(PORTB,SS_bar);
     bd0:	c4 9a       	sbi	0x18, 4	; 24
	sprintf(array,"\n\rWireless Comm using CC1020");
     bd2:	8e 01       	movw	r16, r28
     bd4:	0f 5f       	subi	r16, 0xFF	; 255
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	c8 01       	movw	r24, r16
     bda:	6a e7       	ldi	r22, 0x7A	; 122
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	0e 94 03 07 	call	0xe06	; 0xe06 <strcpy>
     be2:	f8 01       	movw	r30, r16
     be4:	04 c0       	rjmp	.+8      	; 0xbee <main+0x6c>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     be6:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     be8:	5d 9b       	sbis	0x0b, 5	; 11
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <main+0x66>
     bec:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     bee:	80 81       	ld	r24, Z
     bf0:	88 23       	and	r24, r24
     bf2:	c9 f7       	brne	.-14     	; 0xbe6 <main+0x64>
	Initialise_UART();
	sbi(PORTB,SS_bar);
	sprintf(array,"\n\rWireless Comm using CC1020");
	usart_transmit(array);
	
	SetupCC1020PD();
     bf4:	0e 94 64 05 	call	0xac8	; 0xac8 <SetupCC1020PD>
	ResetCC1020();						//CC is still in PD mode after reset
     bf8:	0e 94 65 00 	call	0xca	; 0xca <ResetCC1020>
	SetupCC1020Allregisters();
     bfc:	0e 94 7e 00 	call	0xfc	; 0xfc <SetupCC1020Allregisters>
	//sprintf(array,"\n\r LOCK = %x",ReadFromCC1020Register(CC1020_LOCK));
	//usart_transmit(array);
	
	
	
	WakeUpCC1020ToTX(TXANALOG);
     c00:	87 e4       	ldi	r24, 0x47	; 71
     c02:	0e 94 98 00 	call	0x130	; 0x130 <WakeUpCC1020ToTX>
	if (!CalibrateCC1020(PA_POWER))
     c06:	8f e0       	ldi	r24, 0x0F	; 15
     c08:	0e 94 02 01 	call	0x204	; 0x204 <CalibrateCC1020>
     c0c:	89 2b       	or	r24, r25
     c0e:	79 f4       	brne	.+30     	; 0xc2e <main+0xac>
	{
		sprintf(array,"\n\rTX Calibration failed");
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	67 e9       	ldi	r22, 0x97	; 151
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	0e 94 03 07 	call	0xe06	; 0xe06 <strcpy>
     c1c:	f8 01       	movw	r30, r16
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <main+0xa6>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     c20:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     c22:	5d 9b       	sbis	0x0b, 5	; 11
     c24:	fe cf       	rjmp	.-4      	; 0xc22 <main+0xa0>
     c26:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <main+0x9e>
	{
		sprintf(array,"\n\rTX Calibration failed");
		usart_transmit(array);
	}

	WakeUpCC1020ToRX(RXANALOG);
     c2e:	87 e4       	ldi	r24, 0x47	; 71
     c30:	0e 94 cd 00 	call	0x19a	; 0x19a <WakeUpCC1020ToRX>
	if (!CalibrateCC1020(PA_POWER))
     c34:	8f e0       	ldi	r24, 0x0F	; 15
     c36:	0e 94 02 01 	call	0x204	; 0x204 <CalibrateCC1020>
     c3a:	89 2b       	or	r24, r25
     c3c:	79 f4       	brne	.+30     	; 0xc5c <main+0xda>
	{
		sprintf(array,"\n\rRX Calibration failed");
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	6f ea       	ldi	r22, 0xAF	; 175
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	0e 94 03 07 	call	0xe06	; 0xe06 <strcpy>
     c4a:	f8 01       	movw	r30, r16
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <main+0xd4>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     c4e:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     c50:	5d 9b       	sbis	0x0b, 5	; 11
     c52:	fe cf       	rjmp	.-4      	; 0xc50 <main+0xce>
     c54:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     c56:	80 81       	ld	r24, Z
     c58:	88 23       	and	r24, r24
     c5a:	c9 f7       	brne	.-14     	; 0xc4e <main+0xcc>
unsigned char ReadFromCC1020Register(unsigned char addr)
{
	char Value;
//	char dummy;

	cbi(PORTB,SS_bar);
     c5c:	c4 98       	cbi	0x18, 4	; 24
	Value=SPDR;
     c5e:	8f b1       	in	r24, 0x0f	; 15
	SPDR=(addr<<1)&0xFE; // Write address to CC1020, write bit is always 0->read
     c60:	80 e8       	ldi	r24, 0x80	; 128
     c62:	8f b9       	out	0x0f, r24	; 15

	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     c64:	77 9b       	sbis	0x0e, 7	; 14
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <main+0xe2>
	
	
	SPDR=0xFF; // Dummy write to initiate shift/read via SPI
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & (1<<SPIF)));
     c6c:	77 9b       	sbis	0x0e, 7	; 14
     c6e:	fe cf       	rjmp	.-4      	; 0xc6c <main+0xea>
	Value=SPDR;
     c70:	2f b1       	in	r18, 0x0f	; 15
	//PORTD |=0x02;
	
	sbi(PORTB,SS_bar);
     c72:	c4 9a       	sbi	0x18, 4	; 24
	{
		sprintf(array,"\n\rRX Calibration failed");
		usart_transmit(array);
	}
	
	sprintf(array,"\n\r STATUS = %x",ReadFromCC1020Register(CC1020_STATUS));			// Expected value = 0xBX
     c74:	00 d0       	rcall	.+0      	; 0xc76 <main+0xf4>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <main+0xf6>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <main+0xf8>
     c7a:	ed b7       	in	r30, 0x3d	; 61
     c7c:	fe b7       	in	r31, 0x3e	; 62
     c7e:	31 96       	adiw	r30, 0x01	; 1
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	ad b7       	in	r26, 0x3d	; 61
     c86:	be b7       	in	r27, 0x3e	; 62
     c88:	12 96       	adiw	r26, 0x02	; 2
     c8a:	9c 93       	st	X, r25
     c8c:	8e 93       	st	-X, r24
     c8e:	11 97       	sbiw	r26, 0x01	; 1
     c90:	87 ec       	ldi	r24, 0xC7	; 199
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	93 83       	std	Z+3, r25	; 0x03
     c96:	82 83       	std	Z+2, r24	; 0x02
     c98:	24 83       	std	Z+4, r18	; 0x04
     c9a:	15 82       	std	Z+5, r1	; 0x05
     c9c:	0e 94 0a 07 	call	0xe14	; 0xe14 <sprintf>
     ca0:	f8 01       	movw	r30, r16
     ca2:	8d b7       	in	r24, 0x3d	; 61
     ca4:	9e b7       	in	r25, 0x3e	; 62
     ca6:	06 96       	adiw	r24, 0x06	; 6
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	9e bf       	out	0x3e, r25	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	8d bf       	out	0x3d, r24	; 61
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <main+0x13a>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     cb4:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     cb6:	5d 9b       	sbis	0x0b, 5	; 11
     cb8:	fe cf       	rjmp	.-4      	; 0xcb6 <main+0x134>
     cba:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     cbc:	80 81       	ld	r24, Z
     cbe:	88 23       	and	r24, r24
     cc0:	c9 f7       	brne	.-14     	; 0xcb4 <main+0x132>
	
	
	
  // Start Transmission
	
	sbi(DDRB,DIO);			// Set DIO as output	************
     cc2:	b9 9a       	sbi	0x17, 1	; 23
		//sbi(SREG,SREG_I);	    // Global interrupt enable
		//sbi(GICR,INT0);			// enable INT0
		
		if(!SetupCC1020TX(TXANALOG,PA_POWER))
		{
			sprintf(array,"\n\rPLL LOCK failed");
     cc4:	7e 01       	movw	r14, r28
     cc6:	08 94       	sec
     cc8:	e1 1c       	adc	r14, r1
     cca:	f1 1c       	adc	r15, r1
     ccc:	20 ed       	ldi	r18, 0xD0	; 208
     cce:	82 2e       	mov	r8, r18
     cd0:	27 e0       	ldi	r18, 0x07	; 7
     cd2:	92 2e       	mov	r9, r18
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     cd4:	66 24       	eor	r6, r6
     cd6:	63 94       	inc	r6
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
	SPDR=data;
     cd8:	9f e1       	ldi	r25, 0x1F	; 31
     cda:	79 2e       	mov	r7, r25
			}*/
		
		WriteToCC1020Register(CC1020_MAIN,0x1F);  // configure in PD and stop Transmission				
		cbi(PORTA,LED_X);
		
		sprintf(array,"\n\rTrans complete;count=%d",counter);
     cdc:	8e ef       	ldi	r24, 0xFE	; 254
     cde:	a8 2e       	mov	r10, r24
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	b8 2e       	mov	r11, r24
     ce4:	c1 2c       	mov	r12, r1
     ce6:	ba ef       	ldi	r27, 0xFA	; 250
     ce8:	db 2e       	mov	r13, r27
int hex2ascii (unsigned char val);
void go(void);

int cal_crc(void)
{
    go();
     cea:	0e 94 94 04 	call	0x928	; 0x928 <go>
	
	//for(int l=1; l<=50; l++)
	while(1)
	{
		cal_crc();
		LoadTXBuffer();
     cee:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LoadTXBuffer>
		//sbi(DDRB,DIO);
		
	    WakeUpCC1020ToTX(TXANALOG);													
     cf2:	87 e4       	ldi	r24, 0x47	; 71
     cf4:	0e 94 98 00 	call	0x130	; 0x130 <WakeUpCC1020ToTX>
		//Enable interrupt on negative edge
		// SREG,MCUCR, MCUCSR,GICR,GIFR
		//sbi(SREG,SREG_I);	    // Global interrupt enable
		//sbi(GICR,INT0);			// enable INT0
		
		if(!SetupCC1020TX(TXANALOG,PA_POWER))
     cf8:	87 e4       	ldi	r24, 0x47	; 71
     cfa:	6f e0       	ldi	r22, 0x0F	; 15
     cfc:	0e 94 a1 01 	call	0x342	; 0x342 <SetupCC1020TX>
     d00:	88 23       	and	r24, r24
     d02:	71 f4       	brne	.+28     	; 0xd20 <main+0x19e>
		{
			sprintf(array,"\n\rPLL LOCK failed");
     d04:	c7 01       	movw	r24, r14
     d06:	66 ed       	ldi	r22, 0xD6	; 214
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	0e 94 03 07 	call	0xe06	; 0xe06 <strcpy>
     d0e:	f8 01       	movw	r30, r16
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <main+0x198>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     d12:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     d14:	5d 9b       	sbis	0x0b, 5	; 11
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <main+0x192>
     d18:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     d1a:	80 81       	ld	r24, Z
     d1c:	88 23       	and	r24, r24
     d1e:	c9 f7       	brne	.-14     	; 0xd12 <main+0x190>
		{
			sprintf(array,"\n\rPLL LOCK failed");
			usart_transmit(array);
		}
		
		sprintf(array,"\n\rTransmitting .....\n");
     d20:	c7 01       	movw	r24, r14
     d22:	68 ee       	ldi	r22, 0xE8	; 232
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	0e 94 03 07 	call	0xe06	; 0xe06 <strcpy>
     d2a:	f8 01       	movw	r30, r16
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <main+0x1b4>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     d2e:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     d30:	5d 9b       	sbis	0x0b, 5	; 11
     d32:	fe cf       	rjmp	.-4      	; 0xd30 <main+0x1ae>
     d34:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     d36:	80 81       	ld	r24, Z
     d38:	88 23       	and	r24, r24
     d3a:	c9 f7       	brne	.-14     	; 0xd2e <main+0x1ac>
			usart_transmit(array);
		}
		
		sprintf(array,"\n\rTransmitting .....\n");
		usart_transmit(array);
		sbi(PORTA,LED_X);
     d3c:	d8 9a       	sbi	0x1b, 0	; 27
			{
				sprintf(array,"\n\rByte %d = %x",j,TXBUFFER[j]);
				usart_transmit(array);
			}*/
		
		counter=Transmitpacket();
     d3e:	0e 94 ca 02 	call	0x594	; 0x594 <Transmitpacket>
     d42:	f4 01       	movw	r30, r8
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <main+0x1c2>
/*  This routine writes to a single CC1020 register                         */
/****************************************************************************/

void WriteToCC1020Register(unsigned char addr, unsigned char data)
{
	cbi(PORTB,SS_bar); // Clear SS_bar to enable slave
     d48:	c4 98       	cbi	0x18, 4	; 24
	char array1[25];
	unsigned char dummy;
	dummy=SPDR;
     d4a:	2f b1       	in	r18, 0x0f	; 15

	SPDR=(addr<<1)|0x01; // Write address to CC1020, left shift,write bit is always 1
     d4c:	6f b8       	out	0x0f, r6	; 15
	
	// Wait until data is written 
	while (! (SPSR & (1<<SPIF)));
     d4e:	77 9b       	sbis	0x0e, 7	; 14
     d50:	fe cf       	rjmp	.-4      	; 0xd4e <main+0x1cc>
	{
	 sprintf(array1,"\nCollision detected!!!");
	 usart_transmit(array1);
	}
	
	dummy=SPDR;  
     d52:	2f b1       	in	r18, 0x0f	; 15
	SPDR=data;
     d54:	7f b8       	out	0x0f, r7	; 15

	while (! (SPSR & (1<<SPIF)));
     d56:	77 9b       	sbis	0x0e, 7	; 14
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <main+0x1d4>
	//PORTD |=0x01;												
	sbi(PORTB,SS_bar); //PSEL must be made high for atleast 50ns after each read/write operation	
     d5a:	c4 9a       	sbi	0x18, 4	; 24
				sprintf(array,"\n\rByte %d = %x",j,TXBUFFER[j]);
				usart_transmit(array);
			}*/
		
		WriteToCC1020Register(CC1020_MAIN,0x1F);  // configure in PD and stop Transmission				
		cbi(PORTA,LED_X);
     d5c:	d8 98       	cbi	0x1b, 0	; 27
		
		sprintf(array,"\n\rTrans complete;count=%d",counter);
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <main+0x1de>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <main+0x1e0>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <main+0x1e2>
     d64:	ed b7       	in	r30, 0x3d	; 61
     d66:	fe b7       	in	r31, 0x3e	; 62
     d68:	31 96       	adiw	r30, 0x01	; 1
     d6a:	ad b7       	in	r26, 0x3d	; 61
     d6c:	be b7       	in	r27, 0x3e	; 62
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	fc 92       	st	X, r15
     d72:	ee 92       	st	-X, r14
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	b3 82       	std	Z+3, r11	; 0x03
     d78:	a2 82       	std	Z+2, r10	; 0x02
     d7a:	95 83       	std	Z+5, r25	; 0x05
     d7c:	84 83       	std	Z+4, r24	; 0x04
     d7e:	0e 94 0a 07 	call	0xe14	; 0xe14 <sprintf>
     d82:	f8 01       	movw	r30, r16
     d84:	8d b7       	in	r24, 0x3d	; 61
     d86:	9e b7       	in	r25, 0x3e	; 62
     d88:	06 96       	adiw	r24, 0x06	; 6
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	9e bf       	out	0x3e, r25	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	8d bf       	out	0x3d, r24	; 61
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <main+0x21c>
void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
	{
		UDR=buffer[i];
     d96:	8c b9       	out	0x0c, r24	; 12
		while (! ( UCSRA & (1<<UDRE) ) );      // Always monitor UDRE and not TXC
     d98:	5d 9b       	sbis	0x0b, 5	; 11
     d9a:	fe cf       	rjmp	.-4      	; 0xd98 <main+0x216>
     d9c:	31 96       	adiw	r30, 0x01	; 1
}

void usart_transmit(char *buffer)
{
	int i=0;
	while(buffer[i] != '\0')
     d9e:	80 81       	ld	r24, Z
     da0:	88 23       	and	r24, r24
     da2:	c9 f7       	brne	.-14     	; 0xd96 <main+0x214>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	f6 01       	movw	r30, r12
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <main+0x228>
		
		sprintf(array,"\n\rTrans complete;count=%d",counter);
		usart_transmit(array);
		
		
		for(int d=1;d<=120;d++)
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	89 37       	cpi	r24, 0x79	; 121
     db2:	91 05       	cpc	r25, r1
     db4:	c9 f7       	brne	.-14     	; 0xda8 <main+0x226>
     db6:	99 cf       	rjmp	.-206    	; 0xcea <main+0x168>

00000db8 <__divmodhi4>:
     db8:	97 fb       	bst	r25, 7
     dba:	09 2e       	mov	r0, r25
     dbc:	07 26       	eor	r0, r23
     dbe:	0a d0       	rcall	.+20     	; 0xdd4 <__divmodhi4_neg1>
     dc0:	77 fd       	sbrc	r23, 7
     dc2:	04 d0       	rcall	.+8      	; 0xdcc <__divmodhi4_neg2>
     dc4:	0c d0       	rcall	.+24     	; 0xdde <__udivmodhi4>
     dc6:	06 d0       	rcall	.+12     	; 0xdd4 <__divmodhi4_neg1>
     dc8:	00 20       	and	r0, r0
     dca:	1a f4       	brpl	.+6      	; 0xdd2 <__divmodhi4_exit>

00000dcc <__divmodhi4_neg2>:
     dcc:	70 95       	com	r23
     dce:	61 95       	neg	r22
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255

00000dd2 <__divmodhi4_exit>:
     dd2:	08 95       	ret

00000dd4 <__divmodhi4_neg1>:
     dd4:	f6 f7       	brtc	.-4      	; 0xdd2 <__divmodhi4_exit>
     dd6:	90 95       	com	r25
     dd8:	81 95       	neg	r24
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	08 95       	ret

00000dde <__udivmodhi4>:
     dde:	aa 1b       	sub	r26, r26
     de0:	bb 1b       	sub	r27, r27
     de2:	51 e1       	ldi	r21, 0x11	; 17
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <__udivmodhi4_ep>

00000de6 <__udivmodhi4_loop>:
     de6:	aa 1f       	adc	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	a6 17       	cp	r26, r22
     dec:	b7 07       	cpc	r27, r23
     dee:	10 f0       	brcs	.+4      	; 0xdf4 <__udivmodhi4_ep>
     df0:	a6 1b       	sub	r26, r22
     df2:	b7 0b       	sbc	r27, r23

00000df4 <__udivmodhi4_ep>:
     df4:	88 1f       	adc	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	5a 95       	dec	r21
     dfa:	a9 f7       	brne	.-22     	; 0xde6 <__udivmodhi4_loop>
     dfc:	80 95       	com	r24
     dfe:	90 95       	com	r25
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	08 95       	ret

00000e06 <strcpy>:
     e06:	fb 01       	movw	r30, r22
     e08:	dc 01       	movw	r26, r24
     e0a:	01 90       	ld	r0, Z+
     e0c:	0d 92       	st	X+, r0
     e0e:	00 20       	and	r0, r0
     e10:	e1 f7       	brne	.-8      	; 0xe0a <strcpy+0x4>
     e12:	08 95       	ret

00000e14 <sprintf>:
     e14:	ae e0       	ldi	r26, 0x0E	; 14
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e0 e1       	ldi	r30, 0x10	; 16
     e1a:	f7 e0       	ldi	r31, 0x07	; 7
     e1c:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__prologue_saves__+0x1c>
     e20:	0d 89       	ldd	r16, Y+21	; 0x15
     e22:	1e 89       	ldd	r17, Y+22	; 0x16
     e24:	86 e0       	ldi	r24, 0x06	; 6
     e26:	8c 83       	std	Y+4, r24	; 0x04
     e28:	1a 83       	std	Y+2, r17	; 0x02
     e2a:	09 83       	std	Y+1, r16	; 0x01
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9f e7       	ldi	r25, 0x7F	; 127
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	9e 01       	movw	r18, r28
     e36:	27 5e       	subi	r18, 0xE7	; 231
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	6f 89       	ldd	r22, Y+23	; 0x17
     e40:	78 8d       	ldd	r23, Y+24	; 0x18
     e42:	a9 01       	movw	r20, r18
     e44:	0e 94 2e 07 	call	0xe5c	; 0xe5c <vfprintf>
     e48:	2f 81       	ldd	r18, Y+7	; 0x07
     e4a:	38 85       	ldd	r19, Y+8	; 0x08
     e4c:	02 0f       	add	r16, r18
     e4e:	13 1f       	adc	r17, r19
     e50:	f8 01       	movw	r30, r16
     e52:	10 82       	st	Z, r1
     e54:	2e 96       	adiw	r28, 0x0e	; 14
     e56:	e4 e0       	ldi	r30, 0x04	; 4
     e58:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__epilogue_restores__+0x1c>

00000e5c <vfprintf>:
     e5c:	ab e0       	ldi	r26, 0x0B	; 11
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e4 e3       	ldi	r30, 0x34	; 52
     e62:	f7 e0       	ldi	r31, 0x07	; 7
     e64:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__prologue_saves__>
     e68:	3c 01       	movw	r6, r24
     e6a:	2b 01       	movw	r4, r22
     e6c:	5a 01       	movw	r10, r20
     e6e:	fc 01       	movw	r30, r24
     e70:	17 82       	std	Z+7, r1	; 0x07
     e72:	16 82       	std	Z+6, r1	; 0x06
     e74:	83 81       	ldd	r24, Z+3	; 0x03
     e76:	81 fd       	sbrc	r24, 1
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <vfprintf+0x24>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	c6 c1       	rjmp	.+908    	; 0x120c <vfprintf+0x3b0>
     e80:	9a e0       	ldi	r25, 0x0A	; 10
     e82:	89 2e       	mov	r8, r25
     e84:	1e 01       	movw	r2, r28
     e86:	08 94       	sec
     e88:	21 1c       	adc	r2, r1
     e8a:	31 1c       	adc	r3, r1
     e8c:	f3 01       	movw	r30, r6
     e8e:	23 81       	ldd	r18, Z+3	; 0x03
     e90:	f2 01       	movw	r30, r4
     e92:	23 fd       	sbrc	r18, 3
     e94:	85 91       	lpm	r24, Z+
     e96:	23 ff       	sbrs	r18, 3
     e98:	81 91       	ld	r24, Z+
     e9a:	2f 01       	movw	r4, r30
     e9c:	88 23       	and	r24, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <vfprintf+0x46>
     ea0:	b2 c1       	rjmp	.+868    	; 0x1206 <vfprintf+0x3aa>
     ea2:	85 32       	cpi	r24, 0x25	; 37
     ea4:	39 f4       	brne	.+14     	; 0xeb4 <vfprintf+0x58>
     ea6:	23 fd       	sbrc	r18, 3
     ea8:	85 91       	lpm	r24, Z+
     eaa:	23 ff       	sbrs	r18, 3
     eac:	81 91       	ld	r24, Z+
     eae:	2f 01       	movw	r4, r30
     eb0:	85 32       	cpi	r24, 0x25	; 37
     eb2:	29 f4       	brne	.+10     	; 0xebe <vfprintf+0x62>
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	b3 01       	movw	r22, r6
     eb8:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
     ebc:	e7 cf       	rjmp	.-50     	; 0xe8c <vfprintf+0x30>
     ebe:	98 2f       	mov	r25, r24
     ec0:	ff 24       	eor	r15, r15
     ec2:	ee 24       	eor	r14, r14
     ec4:	99 24       	eor	r9, r9
     ec6:	ff e1       	ldi	r31, 0x1F	; 31
     ec8:	ff 15       	cp	r31, r15
     eca:	d0 f0       	brcs	.+52     	; 0xf00 <vfprintf+0xa4>
     ecc:	9b 32       	cpi	r25, 0x2B	; 43
     ece:	69 f0       	breq	.+26     	; 0xeea <vfprintf+0x8e>
     ed0:	9c 32       	cpi	r25, 0x2C	; 44
     ed2:	28 f4       	brcc	.+10     	; 0xede <vfprintf+0x82>
     ed4:	90 32       	cpi	r25, 0x20	; 32
     ed6:	59 f0       	breq	.+22     	; 0xeee <vfprintf+0x92>
     ed8:	93 32       	cpi	r25, 0x23	; 35
     eda:	91 f4       	brne	.+36     	; 0xf00 <vfprintf+0xa4>
     edc:	0e c0       	rjmp	.+28     	; 0xefa <vfprintf+0x9e>
     ede:	9d 32       	cpi	r25, 0x2D	; 45
     ee0:	49 f0       	breq	.+18     	; 0xef4 <vfprintf+0x98>
     ee2:	90 33       	cpi	r25, 0x30	; 48
     ee4:	69 f4       	brne	.+26     	; 0xf00 <vfprintf+0xa4>
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	24 c0       	rjmp	.+72     	; 0xf32 <vfprintf+0xd6>
     eea:	52 e0       	ldi	r21, 0x02	; 2
     eec:	f5 2a       	or	r15, r21
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	f8 2a       	or	r15, r24
     ef2:	28 c0       	rjmp	.+80     	; 0xf44 <vfprintf+0xe8>
     ef4:	98 e0       	ldi	r25, 0x08	; 8
     ef6:	f9 2a       	or	r15, r25
     ef8:	25 c0       	rjmp	.+74     	; 0xf44 <vfprintf+0xe8>
     efa:	e0 e1       	ldi	r30, 0x10	; 16
     efc:	fe 2a       	or	r15, r30
     efe:	22 c0       	rjmp	.+68     	; 0xf44 <vfprintf+0xe8>
     f00:	f7 fc       	sbrc	r15, 7
     f02:	29 c0       	rjmp	.+82     	; 0xf56 <vfprintf+0xfa>
     f04:	89 2f       	mov	r24, r25
     f06:	80 53       	subi	r24, 0x30	; 48
     f08:	8a 30       	cpi	r24, 0x0A	; 10
     f0a:	70 f4       	brcc	.+28     	; 0xf28 <vfprintf+0xcc>
     f0c:	f6 fe       	sbrs	r15, 6
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <vfprintf+0xbe>
     f10:	98 9c       	mul	r9, r8
     f12:	90 2c       	mov	r9, r0
     f14:	11 24       	eor	r1, r1
     f16:	98 0e       	add	r9, r24
     f18:	15 c0       	rjmp	.+42     	; 0xf44 <vfprintf+0xe8>
     f1a:	e8 9c       	mul	r14, r8
     f1c:	e0 2c       	mov	r14, r0
     f1e:	11 24       	eor	r1, r1
     f20:	e8 0e       	add	r14, r24
     f22:	f0 e2       	ldi	r31, 0x20	; 32
     f24:	ff 2a       	or	r15, r31
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <vfprintf+0xe8>
     f28:	9e 32       	cpi	r25, 0x2E	; 46
     f2a:	29 f4       	brne	.+10     	; 0xf36 <vfprintf+0xda>
     f2c:	f6 fc       	sbrc	r15, 6
     f2e:	6b c1       	rjmp	.+726    	; 0x1206 <vfprintf+0x3aa>
     f30:	40 e4       	ldi	r20, 0x40	; 64
     f32:	f4 2a       	or	r15, r20
     f34:	07 c0       	rjmp	.+14     	; 0xf44 <vfprintf+0xe8>
     f36:	9c 36       	cpi	r25, 0x6C	; 108
     f38:	19 f4       	brne	.+6      	; 0xf40 <vfprintf+0xe4>
     f3a:	50 e8       	ldi	r21, 0x80	; 128
     f3c:	f5 2a       	or	r15, r21
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <vfprintf+0xe8>
     f40:	98 36       	cpi	r25, 0x68	; 104
     f42:	49 f4       	brne	.+18     	; 0xf56 <vfprintf+0xfa>
     f44:	f2 01       	movw	r30, r4
     f46:	23 fd       	sbrc	r18, 3
     f48:	95 91       	lpm	r25, Z+
     f4a:	23 ff       	sbrs	r18, 3
     f4c:	91 91       	ld	r25, Z+
     f4e:	2f 01       	movw	r4, r30
     f50:	99 23       	and	r25, r25
     f52:	09 f0       	breq	.+2      	; 0xf56 <vfprintf+0xfa>
     f54:	b8 cf       	rjmp	.-144    	; 0xec6 <vfprintf+0x6a>
     f56:	89 2f       	mov	r24, r25
     f58:	85 54       	subi	r24, 0x45	; 69
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	18 f0       	brcs	.+6      	; 0xf64 <vfprintf+0x108>
     f5e:	80 52       	subi	r24, 0x20	; 32
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	38 f4       	brcc	.+14     	; 0xf72 <vfprintf+0x116>
     f64:	44 e0       	ldi	r20, 0x04	; 4
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	a4 0e       	add	r10, r20
     f6a:	b5 1e       	adc	r11, r21
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	59 83       	std	Y+1, r21	; 0x01
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <vfprintf+0x134>
     f72:	93 36       	cpi	r25, 0x63	; 99
     f74:	31 f0       	breq	.+12     	; 0xf82 <vfprintf+0x126>
     f76:	93 37       	cpi	r25, 0x73	; 115
     f78:	79 f0       	breq	.+30     	; 0xf98 <vfprintf+0x13c>
     f7a:	93 35       	cpi	r25, 0x53	; 83
     f7c:	09 f0       	breq	.+2      	; 0xf80 <vfprintf+0x124>
     f7e:	56 c0       	rjmp	.+172    	; 0x102c <vfprintf+0x1d0>
     f80:	20 c0       	rjmp	.+64     	; 0xfc2 <vfprintf+0x166>
     f82:	f5 01       	movw	r30, r10
     f84:	80 81       	ld	r24, Z
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	42 e0       	ldi	r20, 0x02	; 2
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	a4 0e       	add	r10, r20
     f8e:	b5 1e       	adc	r11, r21
     f90:	61 01       	movw	r12, r2
     f92:	01 e0       	ldi	r16, 0x01	; 1
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	12 c0       	rjmp	.+36     	; 0xfbc <vfprintf+0x160>
     f98:	f5 01       	movw	r30, r10
     f9a:	c0 80       	ld	r12, Z
     f9c:	d1 80       	ldd	r13, Z+1	; 0x01
     f9e:	f6 fc       	sbrc	r15, 6
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x14c>
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	7f ef       	ldi	r23, 0xFF	; 255
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x150>
     fa8:	69 2d       	mov	r22, r9
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	42 e0       	ldi	r20, 0x02	; 2
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	a4 0e       	add	r10, r20
     fb2:	b5 1e       	adc	r11, r21
     fb4:	c6 01       	movw	r24, r12
     fb6:	0e 94 16 09 	call	0x122c	; 0x122c <strnlen>
     fba:	8c 01       	movw	r16, r24
     fbc:	5f e7       	ldi	r21, 0x7F	; 127
     fbe:	f5 22       	and	r15, r21
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <vfprintf+0x18e>
     fc2:	f5 01       	movw	r30, r10
     fc4:	c0 80       	ld	r12, Z
     fc6:	d1 80       	ldd	r13, Z+1	; 0x01
     fc8:	f6 fc       	sbrc	r15, 6
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <vfprintf+0x176>
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	7f ef       	ldi	r23, 0xFF	; 255
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <vfprintf+0x17a>
     fd2:	69 2d       	mov	r22, r9
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	42 e0       	ldi	r20, 0x02	; 2
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	a4 0e       	add	r10, r20
     fdc:	b5 1e       	adc	r11, r21
     fde:	c6 01       	movw	r24, r12
     fe0:	0e 94 0b 09 	call	0x1216	; 0x1216 <strnlen_P>
     fe4:	8c 01       	movw	r16, r24
     fe6:	50 e8       	ldi	r21, 0x80	; 128
     fe8:	f5 2a       	or	r15, r21
     fea:	f3 fe       	sbrs	r15, 3
     fec:	07 c0       	rjmp	.+14     	; 0xffc <vfprintf+0x1a0>
     fee:	1a c0       	rjmp	.+52     	; 0x1024 <vfprintf+0x1c8>
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	b3 01       	movw	r22, r6
     ff6:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
     ffa:	ea 94       	dec	r14
     ffc:	8e 2d       	mov	r24, r14
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	08 17       	cp	r16, r24
    1002:	19 07       	cpc	r17, r25
    1004:	a8 f3       	brcs	.-22     	; 0xff0 <vfprintf+0x194>
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <vfprintf+0x1c8>
    1008:	f6 01       	movw	r30, r12
    100a:	f7 fc       	sbrc	r15, 7
    100c:	85 91       	lpm	r24, Z+
    100e:	f7 fe       	sbrs	r15, 7
    1010:	81 91       	ld	r24, Z+
    1012:	6f 01       	movw	r12, r30
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	b3 01       	movw	r22, r6
    1018:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    101c:	e1 10       	cpse	r14, r1
    101e:	ea 94       	dec	r14
    1020:	01 50       	subi	r16, 0x01	; 1
    1022:	10 40       	sbci	r17, 0x00	; 0
    1024:	01 15       	cp	r16, r1
    1026:	11 05       	cpc	r17, r1
    1028:	79 f7       	brne	.-34     	; 0x1008 <vfprintf+0x1ac>
    102a:	ea c0       	rjmp	.+468    	; 0x1200 <vfprintf+0x3a4>
    102c:	94 36       	cpi	r25, 0x64	; 100
    102e:	11 f0       	breq	.+4      	; 0x1034 <vfprintf+0x1d8>
    1030:	99 36       	cpi	r25, 0x69	; 105
    1032:	69 f5       	brne	.+90     	; 0x108e <vfprintf+0x232>
    1034:	f7 fe       	sbrs	r15, 7
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <vfprintf+0x1ec>
    1038:	f5 01       	movw	r30, r10
    103a:	20 81       	ld	r18, Z
    103c:	31 81       	ldd	r19, Z+1	; 0x01
    103e:	42 81       	ldd	r20, Z+2	; 0x02
    1040:	53 81       	ldd	r21, Z+3	; 0x03
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0a c0       	rjmp	.+20     	; 0x105c <vfprintf+0x200>
    1048:	f5 01       	movw	r30, r10
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	9c 01       	movw	r18, r24
    1050:	44 27       	eor	r20, r20
    1052:	37 fd       	sbrc	r19, 7
    1054:	40 95       	com	r20
    1056:	54 2f       	mov	r21, r20
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a8 0e       	add	r10, r24
    105e:	b9 1e       	adc	r11, r25
    1060:	9f e6       	ldi	r25, 0x6F	; 111
    1062:	f9 22       	and	r15, r25
    1064:	57 ff       	sbrs	r21, 7
    1066:	09 c0       	rjmp	.+18     	; 0x107a <vfprintf+0x21e>
    1068:	50 95       	com	r21
    106a:	40 95       	com	r20
    106c:	30 95       	com	r19
    106e:	21 95       	neg	r18
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	4f 4f       	sbci	r20, 0xFF	; 255
    1074:	5f 4f       	sbci	r21, 0xFF	; 255
    1076:	e0 e8       	ldi	r30, 0x80	; 128
    1078:	fe 2a       	or	r15, r30
    107a:	ca 01       	movw	r24, r20
    107c:	b9 01       	movw	r22, r18
    107e:	a1 01       	movw	r20, r2
    1080:	2a e0       	ldi	r18, 0x0A	; 10
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	0e 94 4d 09 	call	0x129a	; 0x129a <__ultoa_invert>
    1088:	d8 2e       	mov	r13, r24
    108a:	d2 18       	sub	r13, r2
    108c:	40 c0       	rjmp	.+128    	; 0x110e <vfprintf+0x2b2>
    108e:	95 37       	cpi	r25, 0x75	; 117
    1090:	29 f4       	brne	.+10     	; 0x109c <vfprintf+0x240>
    1092:	1f 2d       	mov	r17, r15
    1094:	1f 7e       	andi	r17, 0xEF	; 239
    1096:	2a e0       	ldi	r18, 0x0A	; 10
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	1d c0       	rjmp	.+58     	; 0x10d6 <vfprintf+0x27a>
    109c:	1f 2d       	mov	r17, r15
    109e:	19 7f       	andi	r17, 0xF9	; 249
    10a0:	9f 36       	cpi	r25, 0x6F	; 111
    10a2:	61 f0       	breq	.+24     	; 0x10bc <vfprintf+0x260>
    10a4:	90 37       	cpi	r25, 0x70	; 112
    10a6:	20 f4       	brcc	.+8      	; 0x10b0 <vfprintf+0x254>
    10a8:	98 35       	cpi	r25, 0x58	; 88
    10aa:	09 f0       	breq	.+2      	; 0x10ae <vfprintf+0x252>
    10ac:	ac c0       	rjmp	.+344    	; 0x1206 <vfprintf+0x3aa>
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <vfprintf+0x272>
    10b0:	90 37       	cpi	r25, 0x70	; 112
    10b2:	39 f0       	breq	.+14     	; 0x10c2 <vfprintf+0x266>
    10b4:	98 37       	cpi	r25, 0x78	; 120
    10b6:	09 f0       	breq	.+2      	; 0x10ba <vfprintf+0x25e>
    10b8:	a6 c0       	rjmp	.+332    	; 0x1206 <vfprintf+0x3aa>
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <vfprintf+0x268>
    10bc:	28 e0       	ldi	r18, 0x08	; 8
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <vfprintf+0x27a>
    10c2:	10 61       	ori	r17, 0x10	; 16
    10c4:	14 fd       	sbrc	r17, 4
    10c6:	14 60       	ori	r17, 0x04	; 4
    10c8:	20 e1       	ldi	r18, 0x10	; 16
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <vfprintf+0x27a>
    10ce:	14 fd       	sbrc	r17, 4
    10d0:	16 60       	ori	r17, 0x06	; 6
    10d2:	20 e1       	ldi	r18, 0x10	; 16
    10d4:	32 e0       	ldi	r19, 0x02	; 2
    10d6:	17 ff       	sbrs	r17, 7
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <vfprintf+0x28e>
    10da:	f5 01       	movw	r30, r10
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	44 e0       	ldi	r20, 0x04	; 4
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <vfprintf+0x29e>
    10ea:	f5 01       	movw	r30, r10
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	bc 01       	movw	r22, r24
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	42 e0       	ldi	r20, 0x02	; 2
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	a4 0e       	add	r10, r20
    10fc:	b5 1e       	adc	r11, r21
    10fe:	a1 01       	movw	r20, r2
    1100:	0e 94 4d 09 	call	0x129a	; 0x129a <__ultoa_invert>
    1104:	d8 2e       	mov	r13, r24
    1106:	d2 18       	sub	r13, r2
    1108:	8f e7       	ldi	r24, 0x7F	; 127
    110a:	f8 2e       	mov	r15, r24
    110c:	f1 22       	and	r15, r17
    110e:	f6 fe       	sbrs	r15, 6
    1110:	0b c0       	rjmp	.+22     	; 0x1128 <vfprintf+0x2cc>
    1112:	5e ef       	ldi	r21, 0xFE	; 254
    1114:	f5 22       	and	r15, r21
    1116:	d9 14       	cp	r13, r9
    1118:	38 f4       	brcc	.+14     	; 0x1128 <vfprintf+0x2cc>
    111a:	f4 fe       	sbrs	r15, 4
    111c:	07 c0       	rjmp	.+14     	; 0x112c <vfprintf+0x2d0>
    111e:	f2 fc       	sbrc	r15, 2
    1120:	05 c0       	rjmp	.+10     	; 0x112c <vfprintf+0x2d0>
    1122:	8f ee       	ldi	r24, 0xEF	; 239
    1124:	f8 22       	and	r15, r24
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x2d0>
    1128:	1d 2d       	mov	r17, r13
    112a:	01 c0       	rjmp	.+2      	; 0x112e <vfprintf+0x2d2>
    112c:	19 2d       	mov	r17, r9
    112e:	f4 fe       	sbrs	r15, 4
    1130:	0d c0       	rjmp	.+26     	; 0x114c <vfprintf+0x2f0>
    1132:	fe 01       	movw	r30, r28
    1134:	ed 0d       	add	r30, r13
    1136:	f1 1d       	adc	r31, r1
    1138:	80 81       	ld	r24, Z
    113a:	80 33       	cpi	r24, 0x30	; 48
    113c:	19 f4       	brne	.+6      	; 0x1144 <vfprintf+0x2e8>
    113e:	99 ee       	ldi	r25, 0xE9	; 233
    1140:	f9 22       	and	r15, r25
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <vfprintf+0x2f8>
    1144:	1f 5f       	subi	r17, 0xFF	; 255
    1146:	f2 fe       	sbrs	r15, 2
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <vfprintf+0x2f8>
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <vfprintf+0x2f6>
    114c:	8f 2d       	mov	r24, r15
    114e:	86 78       	andi	r24, 0x86	; 134
    1150:	09 f0       	breq	.+2      	; 0x1154 <vfprintf+0x2f8>
    1152:	1f 5f       	subi	r17, 0xFF	; 255
    1154:	0f 2d       	mov	r16, r15
    1156:	f3 fc       	sbrc	r15, 3
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <vfprintf+0x326>
    115a:	f0 fe       	sbrs	r15, 0
    115c:	0f c0       	rjmp	.+30     	; 0x117c <vfprintf+0x320>
    115e:	1e 15       	cp	r17, r14
    1160:	10 f0       	brcs	.+4      	; 0x1166 <vfprintf+0x30a>
    1162:	9d 2c       	mov	r9, r13
    1164:	0b c0       	rjmp	.+22     	; 0x117c <vfprintf+0x320>
    1166:	9d 2c       	mov	r9, r13
    1168:	9e 0c       	add	r9, r14
    116a:	91 1a       	sub	r9, r17
    116c:	1e 2d       	mov	r17, r14
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0x320>
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	b3 01       	movw	r22, r6
    1176:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    117a:	1f 5f       	subi	r17, 0xFF	; 255
    117c:	1e 15       	cp	r17, r14
    117e:	c0 f3       	brcs	.-16     	; 0x1170 <vfprintf+0x314>
    1180:	04 c0       	rjmp	.+8      	; 0x118a <vfprintf+0x32e>
    1182:	1e 15       	cp	r17, r14
    1184:	10 f4       	brcc	.+4      	; 0x118a <vfprintf+0x32e>
    1186:	e1 1a       	sub	r14, r17
    1188:	01 c0       	rjmp	.+2      	; 0x118c <vfprintf+0x330>
    118a:	ee 24       	eor	r14, r14
    118c:	04 ff       	sbrs	r16, 4
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <vfprintf+0x352>
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	b3 01       	movw	r22, r6
    1196:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    119a:	02 ff       	sbrs	r16, 2
    119c:	1d c0       	rjmp	.+58     	; 0x11d8 <vfprintf+0x37c>
    119e:	01 fd       	sbrc	r16, 1
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <vfprintf+0x34c>
    11a2:	88 e7       	ldi	r24, 0x78	; 120
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <vfprintf+0x368>
    11a8:	88 e5       	ldi	r24, 0x58	; 88
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <vfprintf+0x368>
    11ae:	80 2f       	mov	r24, r16
    11b0:	86 78       	andi	r24, 0x86	; 134
    11b2:	91 f0       	breq	.+36     	; 0x11d8 <vfprintf+0x37c>
    11b4:	01 ff       	sbrs	r16, 1
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x360>
    11b8:	8b e2       	ldi	r24, 0x2B	; 43
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <vfprintf+0x362>
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	f7 fc       	sbrc	r15, 7
    11c0:	8d e2       	ldi	r24, 0x2D	; 45
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	b3 01       	movw	r22, r6
    11c6:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0x37c>
    11cc:	80 e3       	ldi	r24, 0x30	; 48
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	b3 01       	movw	r22, r6
    11d2:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    11d6:	9a 94       	dec	r9
    11d8:	d9 14       	cp	r13, r9
    11da:	c0 f3       	brcs	.-16     	; 0x11cc <vfprintf+0x370>
    11dc:	da 94       	dec	r13
    11de:	f1 01       	movw	r30, r2
    11e0:	ed 0d       	add	r30, r13
    11e2:	f1 1d       	adc	r31, r1
    11e4:	80 81       	ld	r24, Z
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	b3 01       	movw	r22, r6
    11ea:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    11ee:	dd 20       	and	r13, r13
    11f0:	a9 f7       	brne	.-22     	; 0x11dc <vfprintf+0x380>
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <vfprintf+0x3a4>
    11f4:	80 e2       	ldi	r24, 0x20	; 32
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	b3 01       	movw	r22, r6
    11fa:	0e 94 21 09 	call	0x1242	; 0x1242 <fputc>
    11fe:	ea 94       	dec	r14
    1200:	ee 20       	and	r14, r14
    1202:	c1 f7       	brne	.-16     	; 0x11f4 <vfprintf+0x398>
    1204:	43 ce       	rjmp	.-890    	; 0xe8c <vfprintf+0x30>
    1206:	f3 01       	movw	r30, r6
    1208:	66 81       	ldd	r22, Z+6	; 0x06
    120a:	77 81       	ldd	r23, Z+7	; 0x07
    120c:	cb 01       	movw	r24, r22
    120e:	2b 96       	adiw	r28, 0x0b	; 11
    1210:	e2 e1       	ldi	r30, 0x12	; 18
    1212:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__epilogue_restores__>

00001216 <strnlen_P>:
    1216:	fc 01       	movw	r30, r24
    1218:	05 90       	lpm	r0, Z+
    121a:	61 50       	subi	r22, 0x01	; 1
    121c:	70 40       	sbci	r23, 0x00	; 0
    121e:	01 10       	cpse	r0, r1
    1220:	d8 f7       	brcc	.-10     	; 0x1218 <strnlen_P+0x2>
    1222:	80 95       	com	r24
    1224:	90 95       	com	r25
    1226:	8e 0f       	add	r24, r30
    1228:	9f 1f       	adc	r25, r31
    122a:	08 95       	ret

0000122c <strnlen>:
    122c:	fc 01       	movw	r30, r24
    122e:	61 50       	subi	r22, 0x01	; 1
    1230:	70 40       	sbci	r23, 0x00	; 0
    1232:	01 90       	ld	r0, Z+
    1234:	01 10       	cpse	r0, r1
    1236:	d8 f7       	brcc	.-10     	; 0x122e <strnlen+0x2>
    1238:	80 95       	com	r24
    123a:	90 95       	com	r25
    123c:	8e 0f       	add	r24, r30
    123e:	9f 1f       	adc	r25, r31
    1240:	08 95       	ret

00001242 <fputc>:
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	8c 01       	movw	r16, r24
    124c:	eb 01       	movw	r28, r22
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	81 ff       	sbrs	r24, 1
    1252:	1b c0       	rjmp	.+54     	; 0x128a <fputc+0x48>
    1254:	82 ff       	sbrs	r24, 2
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <fputc+0x30>
    1258:	2e 81       	ldd	r18, Y+6	; 0x06
    125a:	3f 81       	ldd	r19, Y+7	; 0x07
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	28 17       	cp	r18, r24
    1262:	39 07       	cpc	r19, r25
    1264:	64 f4       	brge	.+24     	; 0x127e <fputc+0x3c>
    1266:	e8 81       	ld	r30, Y
    1268:	f9 81       	ldd	r31, Y+1	; 0x01
    126a:	01 93       	st	Z+, r16
    126c:	f9 83       	std	Y+1, r31	; 0x01
    126e:	e8 83       	st	Y, r30
    1270:	06 c0       	rjmp	.+12     	; 0x127e <fputc+0x3c>
    1272:	e8 85       	ldd	r30, Y+8	; 0x08
    1274:	f9 85       	ldd	r31, Y+9	; 0x09
    1276:	80 2f       	mov	r24, r16
    1278:	09 95       	icall
    127a:	89 2b       	or	r24, r25
    127c:	31 f4       	brne	.+12     	; 0x128a <fputc+0x48>
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	9f 83       	std	Y+7, r25	; 0x07
    1286:	8e 83       	std	Y+6, r24	; 0x06
    1288:	02 c0       	rjmp	.+4      	; 0x128e <fputc+0x4c>
    128a:	0f ef       	ldi	r16, 0xFF	; 255
    128c:	1f ef       	ldi	r17, 0xFF	; 255
    128e:	c8 01       	movw	r24, r16
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <__ultoa_invert>:
    129a:	fa 01       	movw	r30, r20
    129c:	aa 27       	eor	r26, r26
    129e:	28 30       	cpi	r18, 0x08	; 8
    12a0:	51 f1       	breq	.+84     	; 0x12f6 <__ultoa_invert+0x5c>
    12a2:	20 31       	cpi	r18, 0x10	; 16
    12a4:	81 f1       	breq	.+96     	; 0x1306 <__ultoa_invert+0x6c>
    12a6:	e8 94       	clt
    12a8:	6f 93       	push	r22
    12aa:	6e 7f       	andi	r22, 0xFE	; 254
    12ac:	6e 5f       	subi	r22, 0xFE	; 254
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	af 4f       	sbci	r26, 0xFF	; 255
    12b6:	b1 e0       	ldi	r27, 0x01	; 1
    12b8:	3e d0       	rcall	.+124    	; 0x1336 <__ultoa_invert+0x9c>
    12ba:	b4 e0       	ldi	r27, 0x04	; 4
    12bc:	3c d0       	rcall	.+120    	; 0x1336 <__ultoa_invert+0x9c>
    12be:	67 0f       	add	r22, r23
    12c0:	78 1f       	adc	r23, r24
    12c2:	89 1f       	adc	r24, r25
    12c4:	9a 1f       	adc	r25, r26
    12c6:	a1 1d       	adc	r26, r1
    12c8:	68 0f       	add	r22, r24
    12ca:	79 1f       	adc	r23, r25
    12cc:	8a 1f       	adc	r24, r26
    12ce:	91 1d       	adc	r25, r1
    12d0:	a1 1d       	adc	r26, r1
    12d2:	6a 0f       	add	r22, r26
    12d4:	71 1d       	adc	r23, r1
    12d6:	81 1d       	adc	r24, r1
    12d8:	91 1d       	adc	r25, r1
    12da:	a1 1d       	adc	r26, r1
    12dc:	20 d0       	rcall	.+64     	; 0x131e <__ultoa_invert+0x84>
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__ultoa_invert+0x48>
    12e0:	68 94       	set
    12e2:	3f 91       	pop	r19
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	26 9f       	mul	r18, r22
    12e8:	11 24       	eor	r1, r1
    12ea:	30 19       	sub	r19, r0
    12ec:	30 5d       	subi	r19, 0xD0	; 208
    12ee:	31 93       	st	Z+, r19
    12f0:	de f6       	brtc	.-74     	; 0x12a8 <__ultoa_invert+0xe>
    12f2:	cf 01       	movw	r24, r30
    12f4:	08 95       	ret
    12f6:	46 2f       	mov	r20, r22
    12f8:	47 70       	andi	r20, 0x07	; 7
    12fa:	40 5d       	subi	r20, 0xD0	; 208
    12fc:	41 93       	st	Z+, r20
    12fe:	b3 e0       	ldi	r27, 0x03	; 3
    1300:	0f d0       	rcall	.+30     	; 0x1320 <__ultoa_invert+0x86>
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__ultoa_invert+0x5c>
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <__ultoa_invert+0x58>
    1306:	46 2f       	mov	r20, r22
    1308:	4f 70       	andi	r20, 0x0F	; 15
    130a:	40 5d       	subi	r20, 0xD0	; 208
    130c:	4a 33       	cpi	r20, 0x3A	; 58
    130e:	18 f0       	brcs	.+6      	; 0x1316 <__ultoa_invert+0x7c>
    1310:	49 5d       	subi	r20, 0xD9	; 217
    1312:	31 fd       	sbrc	r19, 1
    1314:	40 52       	subi	r20, 0x20	; 32
    1316:	41 93       	st	Z+, r20
    1318:	02 d0       	rcall	.+4      	; 0x131e <__ultoa_invert+0x84>
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__ultoa_invert+0x6c>
    131c:	ea cf       	rjmp	.-44     	; 0x12f2 <__ultoa_invert+0x58>
    131e:	b4 e0       	ldi	r27, 0x04	; 4
    1320:	a6 95       	lsr	r26
    1322:	97 95       	ror	r25
    1324:	87 95       	ror	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	ba 95       	dec	r27
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__ultoa_invert+0x86>
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 05       	cpc	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	08 95       	ret
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	0a 2e       	mov	r0, r26
    133c:	06 94       	lsr	r0
    133e:	57 95       	ror	r21
    1340:	47 95       	ror	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	ba 95       	dec	r27
    1348:	c9 f7       	brne	.-14     	; 0x133c <__ultoa_invert+0xa2>
    134a:	62 0f       	add	r22, r18
    134c:	73 1f       	adc	r23, r19
    134e:	84 1f       	adc	r24, r20
    1350:	95 1f       	adc	r25, r21
    1352:	a0 1d       	adc	r26, r0
    1354:	08 95       	ret

00001356 <__prologue_saves__>:
    1356:	2f 92       	push	r2
    1358:	3f 92       	push	r3
    135a:	4f 92       	push	r4
    135c:	5f 92       	push	r5
    135e:	6f 92       	push	r6
    1360:	7f 92       	push	r7
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	ca 1b       	sub	r28, r26
    1380:	db 0b       	sbc	r29, r27
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	09 94       	ijmp

0000138e <__epilogue_restores__>:
    138e:	2a 88       	ldd	r2, Y+18	; 0x12
    1390:	39 88       	ldd	r3, Y+17	; 0x11
    1392:	48 88       	ldd	r4, Y+16	; 0x10
    1394:	5f 84       	ldd	r5, Y+15	; 0x0f
    1396:	6e 84       	ldd	r6, Y+14	; 0x0e
    1398:	7d 84       	ldd	r7, Y+13	; 0x0d
    139a:	8c 84       	ldd	r8, Y+12	; 0x0c
    139c:	9b 84       	ldd	r9, Y+11	; 0x0b
    139e:	aa 84       	ldd	r10, Y+10	; 0x0a
    13a0:	b9 84       	ldd	r11, Y+9	; 0x09
    13a2:	c8 84       	ldd	r12, Y+8	; 0x08
    13a4:	df 80       	ldd	r13, Y+7	; 0x07
    13a6:	ee 80       	ldd	r14, Y+6	; 0x06
    13a8:	fd 80       	ldd	r15, Y+5	; 0x05
    13aa:	0c 81       	ldd	r16, Y+4	; 0x04
    13ac:	1b 81       	ldd	r17, Y+3	; 0x03
    13ae:	aa 81       	ldd	r26, Y+2	; 0x02
    13b0:	b9 81       	ldd	r27, Y+1	; 0x01
    13b2:	ce 0f       	add	r28, r30
    13b4:	d1 1d       	adc	r29, r1
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	ed 01       	movw	r28, r26
    13c2:	08 95       	ret

000013c4 <_exit>:
    13c4:	f8 94       	cli

000013c6 <__stop_program>:
    13c6:	ff cf       	rjmp	.-2      	; 0x13c6 <__stop_program>
